import { datasets } from "../../../api/datasets.ts";
import { dataTable } from "../../../lib/data-table.ts";
import { asserts } from "../../../lib/asserts.ts";
import { input } from "../../../prompts/input.ts";
import { args, command, flag, flags, z } from "../../../zcli.ts";
import * as psFlags from "../../../flags.ts";
import { pickJson } from "../../../lib/pick-json.ts";
import { loading } from "../../../lib/loading.ts";
import { assert } from "https://deno.land/std@0.179.0/_util/asserts.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const update = command("update", {
  short: "Update an existing dataset.",
  long: `
    Update an existing dataset.

    Example:
    \`\`\`
    pspace dataset update psukfyemho7 --name my-cool-dataset
    \`\`\`
  `,
  use: `pspace dataset update <dataset-id> [flags]`,
  commands: subCommands,
  args: args().tuple([z.string().describe("The dataset ID to update.")]),
  flags: flags({
    name: flag({
      short: "The new name for the dataset.",
    }).string().optional(),
    description: flag({
      short: "The new description for the dataset.",
    }).string().optional(),
    fields: psFlags.fields,
  }),
}).run(
  async function* ({ args, flags }) {
    const [id] = args;
    let { name, description } = flags;

    if (!name) {
      name = await input("New name:");
      if (!name) {
        name = undefined;
      }
    }

    if (!description) {
      description = await input("New description:");
      if (!description) {
        description = undefined;
      }
    }

    assert(
      name || description,
      "You must provide a name or description to update.",
    );

    const result = await loading(datasets.update({ name, id }), {
      enabled: !flags.json,
    });

    asserts(result.ok, result);

    if (!flags.json) {
      for await (const line of dataTable([result.data], flags.fields)) {
        yield line;
      }
    } else {
      yield pickJson(result.data, flags.fields);
    }
  },
);
