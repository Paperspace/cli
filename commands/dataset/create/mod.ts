import { datasets } from "../../../api/datasets.ts";
import * as psFlags from "../../../flags.ts";
import { asserts } from "../../../lib/asserts.ts";
import { dataTable } from "../../../lib/data-table.ts";
import { loading } from "../../../lib/loading.ts";
import { pickJson } from "../../../lib/pick-json.ts";
import { input } from "../../../prompts/input.ts";
import { command, flag, flags } from "../../../zcli.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const create = command("create", {
  short: "Create a new dataset",
  long: `
    Create a new dataset. This command will prompt you for a name if you don't
    provide one.
  `,
  commands: subCommands,
  flags: flags({
    fields: psFlags.fields,
  }).merge(flags({
    "name": flag({
      aliases: ["n"],
      short: "The name of the dataset",
    }).ostring(),
    "description": flag({
      aliases: ["d"],
      short: "The description of the dataset",
    }).ostring(),
    "is-public": flag({
      short: "Whether the dataset is public",
    }).oboolean(),
    "storage-provider-id": flag({
      aliases: ["s"],
      short: "The ID of the storage provider to use for the dataset",
    }).ostring(),
  })),
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
  },
}).run(async function* ({ flags }) {
  let name: string | undefined = flags["name"];
  let description: string | undefined = flags["description"];
  const isPublic: boolean | undefined = flags["is-public"];
  let storageProviderId: string | undefined = flags["storage-provider-id"];

  if (!name) {
    name = await input("Name:");
    asserts(name, "You must provide a name for the dataset.");
  }

  if (!description) {
    description = await input("Description:");
    if (!description) {
      description = undefined;
    }
  }

  if (!storageProviderId) {
    storageProviderId = await input("storage provider id:");
    asserts(
      storageProviderId,
      "You must provide a storage provider id for the dataset.",
    );
  }

  const result = await loading(
    datasets.create({
      name,
      description,
      isPublic: isPublic ?? false,
      storageProviderId,
    }),
    {
      enabled: !flags.json,
    },
  );
  asserts(result.ok, result);

  if (!flags.json) {
    for await (const line of dataTable([result.data], flags.fields)) {
      yield line;
    }
  } else {
    yield pickJson(result.data, flags.fields);
  }
});
