import { command, flag, flags } from "../../zcli.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const up = command("up", {
  short: "Deploy your app to Paperspace",
  long: ({ root }) => `
    This will upsert an app config and deploy your app to Paperspace. You can optionally 
    specify a path to a config file. If no config file is specified, the default
    config file paths will be tried.

    Deploy the app in the current directory.
    \`\`\`
    $ ${root.name} up
    \`\`\`

    Deploy the app using a config file.
    \`\`\`
    $ ${root.name} up -c paperspace.json
    \`\`\`

    Deploy an app in a different directory.
    \`\`\`
    $ ${root.name} up --cwd ../my-app
    \`\`\`
  `,
  commands: subCommands,
  flags: flags({
    config: flag({
      aliases: ["c"],
      short:
        "The path to the config file. Defaults to our default config file paths.",
      long: `
        The path to the config file. Defaults to our default config file paths.

        The default config file paths are in order of precedence:

        - \`paperspace.yaml\`
        - \`paperspace.yml\`
        - \`paperspace.json\`
        - \`paperspace.toml\`
        - \`.paperspace/app.yaml\`
        - \`.paperspace/app.yml\`
        - \`.paperspace/app.json\`
        - \`.paperspace/app.toml\`
      `,
    }).ostring(),
    cwd: flag({
      short:
        "The directory to deploy the app from. Defaults to the current directory.",
    }).ostring(),
  }),
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
  },
}).run(
  async function* ({ args, flags }) {
    yield "hello";
  },
);
