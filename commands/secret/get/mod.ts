import { secretSchema } from "./../schemas.ts";
import { projectSecrets } from "../../../api/projects.ts";
import { teamSecrets } from "../../../api/teams.ts";
import { config } from "../../../config.ts";
import { asserts } from "../../../lib/asserts.ts";
import { findProject } from "../../../lib/find-project.ts";
import { loading } from "../../../lib/loading.ts";
import { input } from "../../../prompts/input.ts";
import { args, command, flags } from "../../../zcli.ts";
import { secretFlags } from "../flags.ts";
import { dataTable } from "../../../lib/data-table.ts";
import { fields } from "../../../flags.ts";
import { pickJson } from "../../../lib/pick-json.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const get = command("get", {
  short: "Get a secret",
  long: `
    Get a secret from a project or team.
  `,
  commands: subCommands,
  args: args().tuple([
    secretSchema.shape.name.describe("The name of the secret to get"),
  ]).optional(),
  flags: secretFlags.merge(flags({
    fields,
  })),
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
  },
}).run(
  async function* ({ args, flags }) {
    let [name] = args;

    if (!name) {
      name = await input("Name:", {
        filter: (v) => !!v.sequence.match(/[a-zA-Z0-9_]/),
      });
      asserts(name, "A secret name is required");
    }

    const parsedName = secretSchema.shape.name.safeParse(name);
    asserts(
      parsedName.success,
      "error" in parsedName ? parsedName.error : "",
    );

    if (!flags.global) {
      const project = await findProject({
        handle: flags["project-id"],
        cwd: flags.cwd,
        quiet: flags.json,
      });

      const response = await loading(
        projectSecrets.get({ handle: project.handle, name }),
      );

      asserts(response.ok, response);
      const result = response.data;

      if (flags.json) {
        yield pickJson(result, flags.fields);
      } else {
        for await (const line of dataTable([result], flags.fields)) {
          yield line;
        }
      }
    } else {
      const team = await config.get("team");
      asserts(team, "A team is required");

      const response = await loading(
        teamSecrets.get({ handle: team, name }),
      );

      asserts(response.ok, response);
      const result = response.data;

      if (flags.json) {
        yield pickJson(result, flags.fields);
      } else {
        for await (const line of dataTable([result], flags.fields)) {
          yield line;
        }
      }
    }
  },
);
