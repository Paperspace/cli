import { secretSchema } from "./../schemas.ts";
import { projectSecrets } from "../../../api/projects.ts";
import { teamSecrets } from "../../../api/teams.ts";
import { config } from "../../../config.ts";
import { asserts } from "../../../lib/asserts.ts";
import { findProject } from "../../../lib/find-project.ts";
import { loading } from "../../../lib/loading.ts";
import { input } from "../../../prompts/input.ts";
import { confirm } from "../../../prompts/confirm.ts";
import { secret } from "../../../prompts/secret.ts";
import { args, command, fmt } from "../../../zcli.ts";
import { secretFlags } from "../flags.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const create = command("create", {
  short: "",
  commands: subCommands,
  args: args().tuple([
    secretSchema.shape.name.describe("The name of the secret"),
    secretSchema.shape.value.describe("The value of the secret"),
  ]).optional(),
  flags: secretFlags,
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
  },
}).run(
  async function* ({ args, flags }) {
    let [name, value] = args;

    if (!name) {
      name = await input("Name:", {
        filter: (v) => !!v.sequence.match(/[a-zA-Z0-9_]/),
      });
      asserts(name, "A secret name is required");
    }

    const parsedName = secretSchema.shape.name.safeParse(name);
    asserts(
      parsedName.success,
      "error" in parsedName ? parsedName.error : "",
    );

    if (!value) {
      value = await secret("Value:");
      asserts(value, "A secret value is required");
    }

    const parsedValue = secretSchema.shape.value.safeParse(name);
    asserts(
      parsedValue.success,
      "error" in parsedValue ? parsedValue.error : "",
    );

    if (flags.global) {
      const team = await config.get("team");
      asserts(
        team,
        "You must be logged into a team to create a secret.",
      );

      if (!flags.json) {
        yield fmt.colors.yellow(
          `This secret will be available to all resources in the team.`,
        );
        asserts(
          await confirm(
            `Are you sure you want to create a global secret in team "${team}"?`,
          ),
          "Aborted",
        );
      }

      const response = await loading(
        teamSecrets.create({ handle: team, name, value }),
      );

      asserts(response.ok, response);
      const result = response.data;

      if (flags.json) {
        yield JSON.stringify(result, null, 2);
      } else {
        yield `Created secret "${name}" in team "${team}"`;
      }
    } else {
      const project = await findProject({
        handle: flags["project-id"],
        cwd: flags.cwd,
        quiet: flags.json,
      });
      const response = await loading(
        projectSecrets.create({ handle: project.handle, name, value }),
      );

      asserts(response.ok, response);
      const result = response.data;

      if (flags.json) {
        yield JSON.stringify(result, null, 2);
      } else {
        yield `Created secret "${name}" in project "${project.name}"`;
      }
    }
  },
);
