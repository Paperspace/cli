import { args, command, flag, flags, z } from "../../../zcli.ts";
import * as psFlags from "../../../flags.ts";
import { asserts } from "../../../lib/asserts.ts";
import { loading } from "../../../lib/loading.ts";
import { vms } from "../../../api/vms.ts";
import { dataTable } from "../../../lib/data-table.ts";
import { pickJson } from "../../../lib/pick-json.ts";
import { input } from "../../../prompts/input.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const update = command("update", {
  short: "Update a VM.",
  long: `
    Update a VM.

    Example:
    \`\`\`
    pspace vm update my-vm --name my-cool-vm
    \`\`\`
  `,
  use: `pspace vm update <vm-name> [flags]`,
  commands: subCommands,
  args: args().tuple([z.string().describe("The name of the VM to update.")]),
  flags: flags({
    newName: flag({
      short: "The new name for the VM.",
    }).string().min(1).max(120).optional(),
    fields: psFlags.fields,
  }),
}).run(async function* ({ args, flags }) {
  const [name] = args;
  let { newName } = flags;

  if (!newName) {
    newName = await input("New name:");
    asserts(newName, "You must provide a new name for the VM.");
  }

  const result = await loading(vms.update({ name, newName }), {
    enabled: !flags.json,
  });

  asserts(result.ok, result);

  if (!flags.json) {
    for await (const line of dataTable([result.data], flags.fields)) {
      yield line;
    }
  } else {
    yield pickJson(result.data, flags.fields);
  }
});
