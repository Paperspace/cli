import { args, command, flags, z } from "../../../zcli.ts";
import * as psFlags from "../../../flags.ts";
import { loading } from "../../../lib/loading.ts";
import { vms } from "../../../api/vms.ts";
import { asserts } from "../../../lib/asserts.ts";
import { select } from "../../../prompts/select.ts";
import { dataTable } from "../../../lib/data-table.ts";
import { pickJson } from "../../../lib/pick-json.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const get = command("get", {
  short: "Get a VM.",
  long: `
    Get a VM by its name. If you don't provide a name, this command will
    prompt you for one based on the VMs you have access to.

    Example:
    \`\`\`
    pspace vm get my-vm
    \`\`\`
  `,
  commands: subCommands,
  args: args().tuple([z.string().describe("The name of the VM to get.")])
    .optional(),
  flags: flags({
    fields: psFlags.fields,
  }),
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
  },
}).run(async function* ({ args, flags }) {
  let [name] = args;

  if (!name) {
    const existingVMs = await loading(vms.list({ limit: 50 }));
    asserts(existingVMs.ok, existingVMs);

    const selected = await select(
      "Select a VM:",
      existingVMs.data.items,
      {
        renderOption(option, isSelected) {
          return `${isSelected ? ">" : " "} ${option.name}`;
        },
      },
    );

    asserts(selected, "No VM selected.");
    name = selected.name;
    asserts(name, "No VM selected.");
  }

  const result = await loading(vms.get({ name }), {
    enabled: !flags.json,
  });

  asserts(result.ok, result);

  if (!flags.json) {
    for await (const line of dataTable([result.data], flags.fields)) {
      yield line;
    }
  } else {
    yield pickJson(result.data, flags.fields);
  }
});
