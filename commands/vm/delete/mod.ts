import { vms } from "../../../api/vms.ts";
import { asserts } from "../../../lib/asserts.ts";
import { dataTable } from "../../../lib/data-table.ts";
import { loading } from "../../../lib/loading.ts";
import { pickJson } from "../../../lib/pick-json.ts";
import { select } from "../../../prompts/select.ts";
import { args, command, z } from "../../../zcli.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const delete_ = command("delete", {
  short: "Delete a VM",
  long: ({ root }) => `
    Delete a VM by its name. If you don't provide a name, this command will prompt you for one based on the VMs you have access to.

    \`\`\`
    ${root.name} vm delete my-vm
    \`\`\`
  `,
  commands: subCommands,
  args: args().tuple([z.string().describe("The name of the VM to delete.")])
    .optional(),
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
  },
}).run(
  async function* ({ args, flags }) {
    let [name] = args;

    if (!name) {
      const existingVms = await loading(vms.list({ limit: 50 }));
      asserts(existingVms.ok, existingVms);

      const selected = await select(
        "Select a VM:",
        existingVms.data.items,
        {
          filter(input, option) {
            return option.name.toLowerCase().startsWith(input);
          },
          renderOption(option, isSelected) {
            return `${isSelected ? ">" : " "} ${option.name}`;
          },
        },
      );

      asserts(selected, "No VM selected.");
      name = selected.name;
    }

    const result = await loading(vms.delete({ name }), {
      enabled: !flags.json,
    });

    asserts(result.ok, result);

    if (!flags.json) {
      for await (const line of dataTable([result.data])) {
        yield line;
      }
    } else {
      yield pickJson(result.data);
    }
  },
);
