import { asserts } from "../../../lib/asserts.ts";
import { loading } from "../../../lib/loading.ts";
import { command, flag, flags } from "../../../zcli.ts";
import { dataTable } from "../../../lib/data-table.ts";
import { fields } from "../../../flags.ts";
import { pickJson } from "../../../lib/pick-json.ts";
import { sharedDrives } from "../../../api/shared-drives.ts";
import { defaultFields } from "../mod.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const create = command("create", {
  short: "Create a shared drive",
  long: `
    Create a shared drive.
  `,
  commands: subCommands,
  flags: flags({
    fields,
  }).merge(flags({
    "name": flag({
      aliases: ["n"],
      short: "The name of the shared drive",
    }).string(),
    "network-id": flag({
      short: "The ID of the network to create the shared drive in",
    }).string(),
    "region": flag({
      short: "The region to create the shared drive in",
    }).string(),
    "size": flag({
      short: "The size of the shared drive",
    }).number(),
  })),
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
    requireInGoodStanding: true,
  },
}).run(
  async function* ({ flags }) {
    const response = await loading(
      sharedDrives.create({
        name: flags.name,
        networkId: flags["network-id"],
        region: flags.region,
        size: flags.size,
      }),
    );

    asserts(response.ok, response);
    const result = response.data;

    if (flags.json) {
      yield pickJson(result, flags.fields);
    } else {
      for await (
        const line of dataTable([result], flags.fields ?? defaultFields)
      ) {
        yield line;
      }
    }
  },
);
