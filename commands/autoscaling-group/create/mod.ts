import { asserts } from "../../../lib/asserts.ts";
import { loading } from "../../../lib/loading.ts";
import { command, flag, flags } from "../../../zcli.ts";
import { dataTable } from "../../../lib/data-table.ts";
import { fields } from "../../../flags.ts";
import { pickJson } from "../../../lib/pick-json.ts";
import { autoscalingGroups } from "../../../api/autoscaling-groups.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const create = command("create", {
  short: "Create an autoscaling group",
  long: `
    Create an autoscaling group.
  `,
  commands: subCommands,
  flags: flags({
    fields,
  }).merge(flags({
    "name": flag({
      aliases: ["n"],
      short: "The name of the autoscaling group",
    }).string(),
    "cluster-id": flag({
      short: "The ID of the cluster",
    }).string(),
    "machine-type": flag({
      short: "The machine type for the autoscaling group",
    }).string(),
    "network-id": flag({
      short: "The ID of the network for the autoscaling group",
    }).string(),
    "template-id": flag({
      short: "The ID of the template for the autoscaling group",
    }).string(),
    "startup-script-id": flag({
      short: "The ID of the startup script for the autoscaling group",
    }).string(),
    "max": flag({
      short: "The maximum number of active machines in the autoscaling group",
    }).number(),
    "min": flag({
      short: "The minimum number of active machines in the autoscaling group",
    }).number(),
    "provisioning-timeout": flag({
      short:
        "The timeout for provisioning machines in the autoscaling group, in minutes",
    }).onumber(),
  })),
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
    requireInGoodStanding: true,
  },
}).run(
  async function* ({ flags }) {
    const response = await loading(
      autoscalingGroups.create({
        name: flags.name,
        clusterId: flags["cluster-id"],
        machineType: flags["machine-type"],
        networkId: flags["network-id"],
        templateId: flags["template-id"],
        max: flags.max,
        min: flags.min,
        startupScriptId: flags["startup-script-id"],
        provisioningTimeout: flags["provisioning-timeout"],
      }),
    );

    asserts(response.ok, response);
    const result = response.data;

    if (flags.json) {
      yield pickJson(result, flags.fields);
    } else {
      for await (const line of dataTable([result], flags.fields)) {
        yield line;
      }
    }
  },
);
