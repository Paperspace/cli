// deno-lint-ignore-file no-explicit-any
import { args, command, z } from "../../../zcli.ts";
import { config, configPaths } from "../../../config.ts";
import { ConfigError } from "../../../errors.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const set = command("set", {
  short: "Set a configuration value.",
  commands: subCommands,
  args: args({
    short: "The key/value pair to set.",
  }).tuple([
    z.enum(configPaths).describe("The configuration key."),
    z.string().describe("The new configuration value."),
  ]),
}).run(async function* ({ args }) {
  const [key, value] = args;

  try {
    await config.set<any>(key, value);
  } catch (err) {
    if (err instanceof z.ZodError) {
      const formErrors = err.formErrors;
      for (const e of err.errors) {
        yield `⛔ Invalid value for key "${e.path.join(".")}". ${
          formErrors.fieldErrors[e.path[0]]
        }`;
      }
    } else if (err instanceof ConfigError) {
      yield `⛔ ${err.message}`;
    }

    Deno.exit(1);
  }

  yield `${key} = ${await config.get(key as any)}`;
});
