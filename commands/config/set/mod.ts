// deno-lint-ignore-file no-explicit-any
import { args, command, z } from "../../../zcli.ts";
import { config, configPaths } from "../../../config.ts";
import { ConfigError } from "../../../errors.ts";
import { select } from "../../../prompts/select.ts";
import { invariant } from "../../../lib/invariant.ts";
import { input } from "../../../prompts/input.ts";
import { credentials } from "../../../credentials.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const set = command("set", {
  short: "Set a configuration value.",
  commands: subCommands,
  args: args({
    short: "The key/value pair to set.",
  }).tuple([
    z.enum(configPaths).describe("The configuration key."),
  ]).rest(
    z.string().describe("The new configuration value."),
  ).optional(),
}).run(async function* ({ args }) {
  let [key, value] = args;

  if (!key) {
    key = await select("Select a key:", configPaths);
    invariant(key, "No key selected.");
  }

  if (!value) {
    if (key === "team") {
      const teams = Object.keys(await credentials.get("keys"));

      if (teams.length) {
        value = await select("Select a team:", teams);
      }
    } else {
      value = await input(`Enter a value for "${key}":`);
    }

    invariant(value, "No value entered.");
  }

  try {
    await config.set<any>(key, value);
  } catch (err) {
    if (err instanceof z.ZodError) {
      const formErrors = err.formErrors;
      for (const e of err.errors) {
        yield `⛔ Invalid value for key "${e.path.join(".")}". ${
          formErrors.fieldErrors[e.path[0]]
        }`;
      }
    } else if (err instanceof ConfigError) {
      yield `⛔ ${err.message}`;
    }

    Deno.exit(1);
  }

  yield `${key} = ${await config.get(key as any)}`;
});
