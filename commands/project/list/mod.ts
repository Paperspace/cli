import { projects } from "../../../api/projects.ts";
import { command, flag, flags, z } from "../../../zcli.ts";
import { invariant } from "../../../lib/invariant.ts";

/**
 * This variable is automatically generated by `zcli add`. Do not remove this
 * or change its name unless you're no longer using `zcli add`.
 */
const subCommands: ReturnType<typeof command>[] = [];

export const list = command("list", {
  short: "List projects.",
  long: `
    List projects in your team.
  `,
  commands: subCommands,
  flags: flags({
    limit: flag({
      short: "The number of projects to return in the next page.",
    }).onumber(),
    after: flag({ short: "The cursor to fetch the next results from." })
      .ostring(),
    orderBy: flag({ short: "The field to order projects by." }).enum([
      "dtCreated",
    ]).optional(),
    asc: flag({ short: "Whether to order projects ascending." }).oboolean(),
    desc: flag({ short: "Whether to order projects descending." }).oboolean(),
    fields: flag({
      short: "The fields to include in the response.",
      aliases: ["F"],
    }).array(z.string()).optional(),
  }),
  // We use command metadata in the `persistentPreRun` function to check if a
  // command requires an API key. If it does, we'll check to see if one is
  // set. If not, we'll throw an error.
  meta: {
    requireApiKey: true,
  },
}).run(async ({ flags }) => {
  const result = await projects.list({
    ...flags,
    order: flags.asc ? "asc" : undefined,
  });
  invariant(result.ok, result);
  console.log(result.data);
});
