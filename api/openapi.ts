/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/session": {
    /**
     * Get the current session 
     * @description Get the current session. If a user is not logged in, this will be null. Otherwise, it will contain the current team and user.
     */
    get: operations["query.auth.session"];
  };
  "/deployments": {
    /**
     * List deployments 
     * @description Fetches a list of deployments for a logged in user.
     */
    get: operations["query.deployments.list"];
    /**
     * Upsert a deployment 
     * @description Submit a new deployment configuration. If a deployment does not exist, one is created. Otherwise, a deployment is updated with new configuration.
     */
    post: operations["mutation.deployments.upsert"];
  };
  "/deployments/{id}": {
    /**
     * Get a deployment 
     * @description Fetches a single deployment by deployment ID.
     */
    get: operations["query.deployments.get"];
    /**
     * Delete a deployment 
     * @description Deletes a deployment by deployment ID.
     */
    delete: operations["mutation.deployments.delete"];
  };
  "/deployments/{id}/runs": {
    /**
     * List deployment runs 
     * @description Lists the active deployment runs for a deployment.
     */
    get: operations["query.deploymentRunsrouter.get"];
  };
  "/health": {
    /**
     * Health check 
     * @description Check if the API is healthy.
     */
    get: operations["query.health"];
  };
  "/projects": {
    /**
     * List projects 
     * @description 
     *         List projects. This endpoint supports pagination and sorting.
     */
    get: operations["query.projects.list"];
    /**
     * Create a project 
     * @description Create a project
     */
    post: operations["mutation.projects.create"];
  };
  "/projects/{handle}": {
    /**
     * Get a project by its ID 
     * @description Get a project by its ID.
     */
    get: operations["query.projects.get"];
    /**
     * Update a project 
     * @description Update a project
     */
    put: operations["mutation.projects.update"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: {
    /** @description Error response */
    readonly error: {
      content: {
        readonly "application/json": {
          readonly code: string;
          readonly issues?: readonly ({
              readonly message: string;
            })[];
          readonly message: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  "query.auth.session": {
    /**
     * Get the current session 
     * @description Get the current session. If a user is not logged in, this will be null. Otherwise, it will contain the current team and user.
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The current team in the session */
            readonly team: {
              /** @description A unique handle for the team */
              readonly handle: string;
              /** @description A numeric ID for the team */
              readonly id: number;
              /** @description The namespace for the team */
              readonly namespace: string;
            };
            /** @description The current user in the session */
            readonly user: {
              /** @description The user's email address */
              readonly email: string;
              /** @description A unique handle for the user */
              readonly handle: string;
              /** @description A numeric ID for the user */
              readonly id: number;
            };
          } | null;
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.deployments.list": {
    /**
     * List deployments 
     * @description Fetches a list of deployments for a logged in user.
     */
    parameters: {
        /** @description Fetch the next page of results after this cursor. */
        /** @description The number of items to fetch after this page. */
        /** @description Order results by one of these fields. */
        /** @description The order to sort the results by. */
      readonly query: {
        after?: string;
        limit?: number;
        orderBy?: "dtCreated";
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
                /**
                 * Format: date-time 
                 * @description The date the deployment was created
                 */
                readonly dtCreated: Date;
                /** @description The unique endpoint for the deployment */
                readonly endpoint: string;
                /** @description The ID of the deployment */
                readonly id: string;
                /** @description The latest deployment configuration. If invalid, null is returned. */
                readonly latestSpec?: ({
                  /** @description The data for the deployment spec */
                  readonly data: ({
                    readonly apiVersion: "v0alpha0" | "latest";
                    readonly command?: readonly [string, ...(string)[]];
                    /** Format: uuid */
                    readonly containerRegistry?: string;
                    /** @default true */
                    readonly enabled: boolean;
                    readonly env?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                    readonly healthchecks?: {
                      readonly liveness?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                      readonly readiness?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                      readonly startup?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                    };
                    readonly image: string;
                    readonly models?: readonly ({
                        readonly id: string;
                        readonly path?: string;
                      })[];
                    readonly name: string;
                    /** @default 80 */
                    readonly port: number;
                    /** @default null */
                    readonly region: string | null;
                    readonly repositories?: {
                      readonly dataset: string;
                      readonly mountPath?: string;
                      readonly repositories: readonly ({
                          readonly name: string;
                          readonly password?: string;
                          readonly ref?: string;
                          readonly url: string;
                          readonly username?: string;
                        })[];
                    };
                    readonly resources: {
                      readonly autoscaling?: {
                        readonly enabled?: boolean;
                        readonly maxReplicas: number;
                        readonly metrics: readonly ({
                            /** @enum {string} */
                            readonly metric: "requestDuration";
                            /** @enum {string} */
                            readonly summary: "average";
                            readonly value: number;
                          } | ({
                            /** @enum {string} */
                            readonly metric: "cpu" | "memory";
                            /** @enum {string} */
                            readonly summary: "average";
                            readonly value: number;
                          }))[];
                      };
                      readonly instanceType: string;
                      /** @default 1 */
                      readonly replicas: number;
                    };
                  }) | ({
                    /** @enum {string} */
                    readonly apiVersion: "v0alpha1";
                    readonly command: readonly [string, ...(string)[]];
                    /** Format: uuid */
                    readonly containerRegistry?: string;
                    /** @default true */
                    readonly enabled: boolean;
                    readonly env?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                    readonly healthchecks?: {
                      readonly liveness?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                      readonly readiness?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                      readonly startup?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                    };
                    readonly image: string;
                    readonly name: string;
                    /** @default null */
                    readonly region: string | null;
                  });
                  /** @description The ID of the deployment the spec belongs to */
                  readonly deploymentId: string;
                  /** @description The error message for the deployment */
                  readonly error: string | null;
                  /**
                   * Format: date-time 
                   * @description The date the deployment was applied to the cluster
                   */
                  readonly externalApplied: Date;
                  /** @description The ID of the deployment spec */
                  readonly id: string;
                  /** @description The ID of the user the deployment belongs to */
                  readonly userId: number;
                }) | null;
                /**
                 * @description The last version hash for the deployment 
                 * @default null
                 */
                readonly latestSpecHash: string | null;
                /** @description The name of the deployment */
                readonly name: string;
                /** @description The ID of the team the deployment belongs to */
                readonly teamId: number;
              })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "mutation.deployments.upsert": {
    /**
     * Upsert a deployment 
     * @description Submit a new deployment configuration. If a deployment does not exist, one is created. Otherwise, a deployment is updated with new configuration.
     */
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The deployment configuration */
          readonly config: ({
            readonly apiVersion: "v0alpha0" | "latest";
            readonly command?: readonly [string, ...(string)[]];
            /** Format: uuid */
            readonly containerRegistry?: string;
            /** @default true */
            readonly enabled: boolean;
            readonly env?: readonly ({
                readonly name: string;
                readonly value: string;
              })[];
            readonly healthchecks?: {
              readonly liveness?: {
                readonly failureThreshold?: number;
                readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                readonly host?: string;
                readonly initialDelaySeconds?: number;
                readonly path: string;
                readonly periodSeconds?: number;
                readonly port?: number;
                readonly timeoutSeconds?: number;
              } | {
                readonly exec: {
                  readonly command: readonly (string)[];
                };
                readonly failureThreshold?: number;
                readonly initialDelaySeconds?: number;
                readonly periodSeconds?: number;
                readonly timeoutSeconds?: number;
              };
              readonly readiness?: {
                readonly failureThreshold?: number;
                readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                readonly host?: string;
                readonly initialDelaySeconds?: number;
                readonly path: string;
                readonly periodSeconds?: number;
                readonly port?: number;
                readonly timeoutSeconds?: number;
              } | {
                readonly exec: {
                  readonly command: readonly (string)[];
                };
                readonly failureThreshold?: number;
                readonly initialDelaySeconds?: number;
                readonly periodSeconds?: number;
                readonly timeoutSeconds?: number;
              };
              readonly startup?: {
                readonly failureThreshold?: number;
                readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                readonly host?: string;
                readonly initialDelaySeconds?: number;
                readonly path: string;
                readonly periodSeconds?: number;
                readonly port?: number;
                readonly timeoutSeconds?: number;
              } | {
                readonly exec: {
                  readonly command: readonly (string)[];
                };
                readonly failureThreshold?: number;
                readonly initialDelaySeconds?: number;
                readonly periodSeconds?: number;
                readonly timeoutSeconds?: number;
              };
            };
            readonly image: string;
            readonly models?: readonly ({
                readonly id: string;
                readonly path?: string;
              })[];
            readonly name: string;
            /** @default 80 */
            readonly port: number;
            /** @default null */
            readonly region: string | null;
            readonly repositories?: {
              readonly dataset: string;
              readonly mountPath?: string;
              readonly repositories: readonly ({
                  readonly name: string;
                  readonly password?: string;
                  readonly ref?: string;
                  readonly url: string;
                  readonly username?: string;
                })[];
            };
            readonly resources: {
              readonly autoscaling?: {
                readonly enabled?: boolean;
                readonly maxReplicas: number;
                readonly metrics: readonly ({
                    /** @enum {string} */
                    readonly metric: "requestDuration";
                    /** @enum {string} */
                    readonly summary: "average";
                    readonly value: number;
                  } | ({
                    /** @enum {string} */
                    readonly metric: "cpu" | "memory";
                    /** @enum {string} */
                    readonly summary: "average";
                    readonly value: number;
                  }))[];
              };
              readonly instanceType: string;
              /** @default 1 */
              readonly replicas: number;
            };
          }) | ({
            /** @enum {string} */
            readonly apiVersion: "v0alpha1";
            readonly command: readonly [string, ...(string)[]];
            /** Format: uuid */
            readonly containerRegistry?: string;
            /** @default true */
            readonly enabled: boolean;
            readonly env?: readonly ({
                readonly name: string;
                readonly value: string;
              })[];
            readonly healthchecks?: {
              readonly liveness?: {
                readonly failureThreshold?: number;
                readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                readonly host?: string;
                readonly initialDelaySeconds?: number;
                readonly path: string;
                readonly periodSeconds?: number;
                readonly port?: number;
                readonly timeoutSeconds?: number;
              } | {
                readonly exec: {
                  readonly command: readonly (string)[];
                };
                readonly failureThreshold?: number;
                readonly initialDelaySeconds?: number;
                readonly periodSeconds?: number;
                readonly timeoutSeconds?: number;
              };
              readonly readiness?: {
                readonly failureThreshold?: number;
                readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                readonly host?: string;
                readonly initialDelaySeconds?: number;
                readonly path: string;
                readonly periodSeconds?: number;
                readonly port?: number;
                readonly timeoutSeconds?: number;
              } | {
                readonly exec: {
                  readonly command: readonly (string)[];
                };
                readonly failureThreshold?: number;
                readonly initialDelaySeconds?: number;
                readonly periodSeconds?: number;
                readonly timeoutSeconds?: number;
              };
              readonly startup?: {
                readonly failureThreshold?: number;
                readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                readonly host?: string;
                readonly initialDelaySeconds?: number;
                readonly path: string;
                readonly periodSeconds?: number;
                readonly port?: number;
                readonly timeoutSeconds?: number;
              } | {
                readonly exec: {
                  readonly command: readonly (string)[];
                };
                readonly failureThreshold?: number;
                readonly initialDelaySeconds?: number;
                readonly periodSeconds?: number;
                readonly timeoutSeconds?: number;
              };
            };
            readonly image: string;
            readonly name: string;
            /** @default null */
            readonly region: string | null;
          });
          /**
           * @description The ID of the deployment to update. 
           * @default null
           */
          readonly deploymentId: string | null;
          /** @description The project ID to deploy resources under. */
          readonly projectId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the deployment */
            readonly deploymentId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.deployments.get": {
    /**
     * Get a deployment 
     * @description Fetches a single deployment by deployment ID.
     */
    parameters: {
      readonly path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time 
             * @description The date the deployment was created
             */
            readonly dtCreated: Date;
            /** @description The unique endpoint for the deployment */
            readonly endpoint: string;
            /** @description The ID of the deployment */
            readonly id: string;
            /** @description The latest deployment configuration. If invalid, null is returned. */
            readonly latestSpec?: ({
              /** @description The data for the deployment spec */
              readonly data: ({
                readonly apiVersion: "v0alpha0" | "latest";
                readonly command?: readonly [string, ...(string)[]];
                /** Format: uuid */
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled: boolean;
                readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                readonly healthchecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly models?: readonly ({
                    readonly id: string;
                    readonly path?: string;
                  })[];
                readonly name: string;
                /** @default 80 */
                readonly port: number;
                /** @default null */
                readonly region: string | null;
                readonly repositories?: {
                  readonly dataset: string;
                  readonly mountPath?: string;
                  readonly repositories: readonly ({
                      readonly name: string;
                      readonly password?: string;
                      readonly ref?: string;
                      readonly url: string;
                      readonly username?: string;
                    })[];
                };
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly ({
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      } | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }))[];
                  };
                  readonly instanceType: string;
                  /** @default 1 */
                  readonly replicas: number;
                };
              }) | ({
                /** @enum {string} */
                readonly apiVersion: "v0alpha1";
                readonly command: readonly [string, ...(string)[]];
                /** Format: uuid */
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled: boolean;
                readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                readonly healthchecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly name: string;
                /** @default null */
                readonly region: string | null;
              });
              /** @description The ID of the deployment the spec belongs to */
              readonly deploymentId: string;
              /** @description The error message for the deployment */
              readonly error: string | null;
              /**
               * Format: date-time 
               * @description The date the deployment was applied to the cluster
               */
              readonly externalApplied: Date;
              /** @description The ID of the deployment spec */
              readonly id: string;
              /** @description The ID of the user the deployment belongs to */
              readonly userId: number;
            }) | null;
            /**
             * @description The last version hash for the deployment 
             * @default null
             */
            readonly latestSpecHash: string | null;
            /** @description The name of the deployment */
            readonly name: string;
            /** @description The ID of the team the deployment belongs to */
            readonly teamId: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "mutation.deployments.delete": {
    /**
     * Delete a deployment 
     * @description Deletes a deployment by deployment ID.
     */
    parameters: {
      readonly path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.deploymentRunsrouter.get": {
    /**
     * List deployment runs 
     * @description Lists the active deployment runs for a deployment.
     */
    parameters: {
        /** @description The latest n number of deployment runs to return */
      readonly query: {
        limit?: number;
      };
      readonly path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": readonly ({
              /**
               * @description The amount of replicas that are available but not ready 
               * @default 0
               */
              readonly availableReplicas: number;
              readonly id: string;
              /** @description The deployment run instances */
              readonly instances: readonly ({
                  /**
                   * Format: date-time 
                   * @description The date the instance was created
                   */
                  readonly dtCreated: Date;
                  /**
                   * Format: date-time 
                   * @description The date the instance was finished 
                   * @default null
                   */
                  readonly dtFinished: Date;
                  /** @description The time series state history of the deployment instance */
                  readonly history: readonly ({
                      /**
                       * @description The state message from the instance at the point in time 
                       * @default null
                       */
                      readonly message: string | null;
                      /** @description The state of the instance at the point in time */
                      readonly state: string;
                      /**
                       * Format: date-time 
                       * @description The timestamp of the state
                       */
                      readonly timestamp: Date;
                    })[];
                  /** @description The ID of the deployment instance */
                  readonly id: string;
                  /** @description The ID of the deployment instance */
                  readonly instanceId: string;
                  /** @description The current state of the instance */
                  readonly state: string;
                  /**
                   * @description The latest state message for the instance 
                   * @default null
                   */
                  readonly stateMessage: string | null;
                })[];
              /**
               * @description The amount of replicas that are ready 
               * @default 0
               */
              readonly readyReplicas: number;
              /**
               * @description The desired amount of replicas for the deployment run 
               * @default 0
               */
              readonly replicas: number;
            })[];
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.health": {
    /**
     * Health check 
     * @description Check if the API is healthy.
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": "HEALTHY";
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.projects.list": {
    /**
     * List projects 
     * @description 
     *         List projects. This endpoint supports pagination and sorting.
     */
    parameters: {
        /** @description Fetch the next page of results after this cursor. */
        /** @description The number of items to fetch after this page. */
        /** @description Order results by one of these fields. */
        /** @description The order to sort the results by. */
      readonly query: {
        after?: string;
        limit?: number;
        orderBy?: "dtCreated";
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
                /**
                 * Format: date-time 
                 * @description The date the project was created
                 */
                readonly dtCreated: Date;
                /**
                 * Format: date-time 
                 * @description The date the project was deleted 
                 * @default null
                 */
                readonly dtDeleted: Date;
                /**
                 * @description The ID of the GitHub App installation if this is is a GitHub-connected project. 
                 * @default null
                 */
                readonly githubAppInstallationId: number | null;
                /** @description The ID of the project */
                readonly handle: string;
                /** @description The name of the project */
                readonly name: string;
                /**
                 * @description The name of the GitHub repository if this is is a GitHub-connected project. 
                 * @default null
                 */
                readonly repoName: string | null;
                /**
                 * @description The node ID of the GitHub repository if this is is a GitHub-connected project. 
                 * @default null
                 */
                readonly repoNodeId: string | null;
                /**
                 * @description The URL of the GitHub repository if this is is a GitHub-connected project. 
                 * @default null
                 */
                readonly repoUrl: string | null;
              })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "mutation.projects.create": {
    /**
     * Create a project 
     * @description Create a project
     */
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the project */
          readonly name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time 
             * @description The date the project was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time 
             * @description The date the project was deleted 
             * @default null
             */
            readonly dtDeleted: Date;
            /**
             * @description The ID of the GitHub App installation if this is is a GitHub-connected project. 
             * @default null
             */
            readonly githubAppInstallationId: number | null;
            /** @description The ID of the project */
            readonly handle: string;
            /** @description The name of the project */
            readonly name: string;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoName: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoNodeId: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoUrl: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.projects.get": {
    /**
     * Get a project by its ID 
     * @description Get a project by its ID.
     */
    parameters: {
        /** @description The ID of the project to get */
      readonly path: {
        handle: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time 
             * @description The date the project was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time 
             * @description The date the project was deleted 
             * @default null
             */
            readonly dtDeleted: Date;
            /**
             * @description The ID of the GitHub App installation if this is is a GitHub-connected project. 
             * @default null
             */
            readonly githubAppInstallationId: number | null;
            /** @description The ID of the project */
            readonly handle: string;
            /** @description The name of the project */
            readonly name: string;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoName: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoNodeId: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoUrl: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "mutation.projects.update": {
    /**
     * Update a project 
     * @description Update a project
     */
    parameters: {
        /** @description The ID of the project to update */
      readonly path: {
        handle: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The new name of the project */
          readonly name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time 
             * @description The date the project was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time 
             * @description The date the project was deleted 
             * @default null
             */
            readonly dtDeleted: Date;
            /**
             * @description The ID of the GitHub App installation if this is is a GitHub-connected project. 
             * @default null
             */
            readonly githubAppInstallationId: number | null;
            /** @description The ID of the project */
            readonly handle: string;
            /** @description The name of the project */
            readonly name: string;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoName: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoNodeId: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            readonly repoUrl: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
}
