/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/apps": {
    /**
     * Create an app
     * @description Create an app.
     */
    post: operations["apps-create"];
  };
  "/apps/{id}": {
    /**
     * Get an app
     * @description Fetches an app.
     */
    get: operations["apps-get"];
    /**
     * Delete an app
     * @description Deletes an app. This will delete all resources associated with the app.
     */
    delete: operations["apps-delete"];
  };
  "/apps/{id}/disable": {
    /**
     * Disable an app
     * @description Disables an app that is currently enabled. This will stop the app's deployments and make it unavailable to users.
     */
    patch: operations["apps-disable"];
  };
  "/apps/{id}/enable": {
    /**
     * Enable an app
     * @description Enables an app that has been previously disabled. This will start the app and make it available to users.
     */
    patch: operations["apps-enable"];
  };
  "/apps/{id}/name": {
    /**
     * Update an app's name
     * @description Change the name of an app
     */
    patch: operations["apps-updateName"];
  };
  "/auth/session": {
    /**
     * Get the current session
     * @description Get the current session. If a user is not logged in, this will be null. Otherwise, it will contain the current team and user.
     */
    get: operations["auth-session"];
  };
  "/autoscaling-groups": {
    /**
     * List autoscaling groups
     * @description List autoscaling groups and filter by machine type.
     */
    get: operations["autoscalingGroups-list"];
    /**
     * Create an autoscaling group
     * @description Create an autoscaling group.
     */
    post: operations["autoscalingGroups-create"];
  };
  "/autoscaling-groups/{id}": {
    /**
     * Get an autoscaling group
     * @description Fetches a single autoscaling group by id.
     */
    get: operations["autoscalingGroups-get"];
    /**
     * Update an autoscaling group
     * @description Update an autoscaling group.
     */
    put: operations["autoscalingGroups-update"];
    /**
     * Delete an autoscaling group
     * @description Delete an autoscaling group.
     */
    delete: operations["autoscalingGroups-delete"];
  };
  "/billing/account-standing": {
    /**
     * Get account standing
     * @description Check whether the current team account is in good standing. If not, send back a message explaining why.
     */
    get: operations["billingAccountStanding-get"];
  };
  "/container-registries": {
    /**
     * List container registries
     * @description Lists container registries for the current team.
     */
    get: operations["containerRegistries-list"];
    /**
     * Create a container registry
     * @description Creates a container registry for the current team.
     */
    post: operations["containerRegistries-create"];
  };
  "/container-registries/{id}": {
    /**
     * List container registries
     * @description Lists container registries for the current team.
     */
    get: operations["containerRegistries-get"];
    /**
     * Update a container registry
     * @description Updates a container registry for the current team.
     */
    put: operations["containerRegistries-update"];
    /**
     * Delete a container registry
     * @description Deletes a container registry for the current team.
     */
    delete: operations["containerRegistries-delete"];
  };
  "/container-registries/{id}/test-connection": {
    /**
     * Test a container registry connection
     * @description Validate that a container registry can be connected to using the provided credentials.
     */
    get: operations["containerRegistries-testConnection"];
  };
  "/deployments": {
    /**
     * List deployments
     * @description Fetches a list of deployments for a logged in user.
     */
    get: operations["deployments-list"];
    /**
     * Upsert a deployment
     * @description Submit a new deployment configuration. If a deployment does not exist, one is created. Otherwise, a deployment is updated with new configuration.
     */
    post: operations["deployments-upsert"];
  };
  "/deployments/{id}": {
    /**
     * Get a deployment
     * @description Fetches a single deployment by deployment ID.
     */
    get: operations["deployments-get"];
    /**
     * Delete a deployment
     * @description Deletes a deployment by deployment ID.
     */
    delete: operations["deployments-delete"];
  };
  "/deployments/{id}/history": {
    /**
     * List app history
     * @description Lists history for a given app.
     */
    get: operations["deploymentHistory-list"];
  };
  "/deployments/{id}/logs": {
    /**
     * List app logs
     * @description Lists logs for a given app.
     */
    get: operations["deploymentLogs-list"];
  };
  "/deployments/{id}/metrics": {
    /**
     * List app metrics
     * @description Lists metrics for a given app.
     */
    get: operations["deploymentMetrics-get"];
  };
  "/deployments/{id}/runs": {
    /**
     * List deployment runs
     * @description Lists the active deployment runs for a deployment.
     */
    get: operations["deploymentRuns-get"];
  };
  "/health": {
    /**
     * Health check
     * @description Check if the API is healthy.
     */
    get: operations["health"];
  };
  "/machine-events": {
    /**
     * List machine events
     * @description Fetches a list of machine events.
     */
    get: operations["machineEvents-list"];
  };
  "/machine-events/{id}": {
    /**
     * Get a machine event
     * @description Fetches a single machine event by ID.
     */
    get: operations["machineEvents-get"];
  };
  "/machines": {
    /**
     * List machines
     * @description Fetches a list of machines.
     */
    get: operations["machines-list"];
    /**
     * Create a machine
     * @description Creates a new machine.
     */
    post: operations["machines-create"];
  };
  "/machines/{id}": {
    /**
     * Get a machine
     * @description Fetches a single machine by ID.
     */
    get: operations["machines-get"];
    /**
     * Update a machine
     * @description Updates a machine.
     */
    put: operations["machines-update"];
    /**
     * Delete a machine
     * @description Deletes a single machine by ID.
     */
    delete: operations["machines-delete"];
  };
  "/machines/{id}/accessors": {
    /**
     * List accessors
     * @description Lists the team members that can explicitly access a machine.
     */
    get: operations["machines-listAccessors"];
    /**
     * Add an accessor
     * @description Adds an accessor to a machine.
     */
    post: operations["machines-addAccessor"];
  };
  "/machines/{id}/accessors/{userId}": {
    /**
     * Get an accessor
     * @description Get an accessor for a machine.
     */
    get: operations["machines-getAccessor"];
    /**
     * Delete an accessor
     * @description Deletes an accessor from a machine.
     */
    delete: operations["machines-removeAccessor"];
  };
  "/machines/{id}/desktop": {
    /**
     * Get desktop settings
     * @description Gets the machine settings that are used to configure desktop streaming.
     */
    get: operations["machines-getDesktop"];
  };
  "/machines/{id}/restart": {
    /**
     * Restart a machine
     * @description Restarts a machine.
     */
    patch: operations["machines-restart"];
  };
  "/machines/{id}/start": {
    /**
     * Start a machine
     * @description Starts a machine.
     */
    patch: operations["machines-start"];
  };
  "/machines/{id}/stop": {
    /**
     * Stop a machine
     * @description Stops a machine.
     */
    patch: operations["machines-stop"];
  };
  "/notebooks": {
    /**
     * List notebooks
     * @description Lists the notebooks you have access to in the current team
     */
    get: operations["notebooks-list"];
  };
  "/private-networks": {
    /**
     * List private networks
     * @description Fetches a list of private networks.
     */
    get: operations["privateNetworks-list"];
    /**
     * Create a private network
     * @description Creates a new private network.
     */
    post: operations["privateNetworks-create"];
  };
  "/private-networks/{id}": {
    /**
     * Get a private network
     * @description Fetches a single private network by ID.
     */
    get: operations["privateNetworks-get"];
    /**
     * Update a private network
     * @description Updates a single private network by ID.
     */
    put: operations["privateNetworks-update"];
    /**
     * Delete a private network
     * @description Deletes a single private network by ID.
     */
    delete: operations["privateNetworks-delete"];
  };
  "/projects": {
    /**
     * List projects
     * @description
     *         List projects. This endpoint supports pagination and sorting.
     */
    get: operations["projects-list"];
    /**
     * Create a project
     * @description Create a project
     */
    post: operations["projects-create"];
  };
  "/projects/{id}": {
    /**
     * Get a project by its ID
     * @description Get a project by its ID.
     */
    get: operations["projects-get"];
    /**
     * Update a project
     * @description Update a project
     */
    put: operations["projects-update"];
    /**
     * Delete a project
     * @description Delete a project
     */
    delete: operations["projects-delete"];
  };
  "/projects/{id}/activity": {
    /**
     * List a project's activity
     * @description Fetches a list of activity items for a given project.
     */
    get: operations["projectActivity-list"];
  };
  "/projects/{id}/apps": {
    /**
     * List a project's apps
     * @description Fetches a list of apps for a project.
     */
    get: operations["projectApps-list"];
  };
  "/projects/{id}/collaborators": {
    /**
     * List a project's collaborators
     * @description Fetches a list of collaborators for a project.
     */
    get: operations["projectCollaborators-list"];
    /**
     * Create a project collaborator
     * @description Adds a new collaborator to a project.
     */
    post: operations["projectCollaborators-create"];
  };
  "/projects/{id}/collaborators/{userId}": {
    /**
     * Delete a project collaborator
     * @description Removes a collaborator from a project.
     */
    delete: operations["projectCollaborators-delete"];
  };
  "/projects/{id}/deployments": {
    /**
     * List a project's deployments
     * @description Fetches a list of deployments for a project.
     */
    get: operations["projectDeployments-list"];
  };
  "/projects/{id}/models": {
    /**
     * List a project's models
     * @description Fetches a list of models for a project.
     */
    get: operations["projectModels-list"];
  };
  "/projects/{id}/models/{modelId}": {
    /**
     * Add a model to a project
     * @description Adds a model to a project.
     */
    post: operations["projectModels-add"];
    /**
     * Remove a model from project
     * @description Remove a model from project.
     */
    delete: operations["projectModels-remove"];
  };
  "/projects/{id}/notebook/{notebookId}": {
    /**
     * Remove a notebook from a project
     * @description Remove a notebook from a project.
     */
    delete: operations["projectNotebooks-remove"];
  };
  "/projects/{id}/notebooks": {
    /**
     * List a project's notebooks
     * @description Fetches a list of notebooks for a project.
     */
    get: operations["projectNotebooks-list"];
  };
  "/projects/{id}/notebooks/{notebookId}": {
    /**
     * Add a notebook to a project
     * @description Adds a notebook to a project.
     */
    post: operations["projectNotebooks-add"];
  };
  "/projects/{id}/secrets": {
    /**
     * List a project's secrets
     * @description Fetches a list of secrets for a project.
     */
    get: operations["projectSecrets-list"];
    /**
     * Create a project secret
     * @description Creates a new secret for a project.
     */
    post: operations["projectSecrets-create"];
  };
  "/projects/{id}/secrets/{name}": {
    /**
     * Get a project secret
     * @description Fetches a secret for a project.
     */
    get: operations["projectSecrets-getProjectSecret"];
    /**
     * Delete a project secret
     * @description Deletes a secret for a project.
     */
    delete: operations["projectSecrets-delete"];
    /**
     * Update a project secret
     * @description Update the value of a secret for a project.
     */
    patch: operations["projectSecrets-update"];
  };
  "/public-ips": {
    /**
     * List public IPs
     * @description Fetches a list of public IPs.
     */
    get: operations["publicIps-list"];
    /**
     * Claim a public IP
     * @description Claims a public IP.
     */
    post: operations["publicIps-claim"];
  };
  "/public-ips/{ip}": {
    /**
     * Assign a public IP
     * @description Assigns a public IP to a machine.
     */
    put: operations["publicIps-assign"];
    /**
     * Release a public IP
     * @description Releases a public IP.
     */
    delete: operations["publicIps-release"];
  };
  "/shared-drives": {
    /**
     * List shared drives
     * @description Fetches a list of shared drives.
     */
    get: operations["sharedDrives-list"];
    /**
     * Create a shared drive
     * @description Creates a new shared drive for use in a private network.
     */
    post: operations["sharedDrives-create"];
  };
  "/shared-drives/{id}": {
    /**
     * Get a shared drive
     * @description Fetches a single shared drive by ID.
     */
    get: operations["sharedDrives-get"];
    /**
     * Update a shared drive
     * @description Updates a single shared drive by ID.
     */
    put: operations["sharedDrives-update"];
    /**
     * Delete a shared drive
     * @description Deletes a single shared drive by ID.
     */
    delete: operations["sharedDrives-delete"];
  };
  "/snapshots": {
    /**
     * List snapshots
     * @description List snapshots and filter by machine.
     */
    get: operations["snapshots-list"];
    /**
     * Create snapshot
     * @description Create a snapshot for a machine.
     */
    post: operations["snapshots-create"];
  };
  "/snapshots/{id}": {
    /**
     * Get a snapshot
     * @description Fetches a single snapshot by ID.
     */
    get: operations["snapshots-get"];
    /**
     * Update a snapshot
     * @description Updates a single snapshot by ID.
     */
    put: operations["snapshots-update"];
    /**
     * Delete snapshot
     * @description Delete a snapshot for a machine.
     */
    delete: operations["snapshots-delete"];
  };
  "/snapshots/{id}/restore": {
    /**
     * Restore snapshot
     * @description Restore a snapshot for a machine.
     */
    post: operations["snapshots-restore"];
  };
  "/startup-scripts": {
    /**
     * List startup scripts
     * @description Fetches a list of startup scripts.
     */
    get: operations["startupScripts-list"];
    /**
     * Create startup script
     * @description Create a startup script.
     */
    post: operations["startupScripts-create"];
  };
  "/startup-scripts/{id}": {
    /**
     * Get a startup script
     * @description Fetches a single startup script by ID.
     */
    get: operations["startupScripts-get"];
    /**
     * Update startup script
     * @description Update a startup script.
     */
    put: operations["startupScripts-update"];
    /**
     * Delete startup script
     * @description Delete a startup script.
     */
    delete: operations["startupScripts-delete"];
  };
  "/startup-scripts/{id}/assign": {
    /**
     * Assign startup script to machine
     * @description Assign a startup script to a machine.
     */
    post: operations["startupScripts-assign"];
  };
  "/startup-scripts/{id}/unassign": {
    /**
     * Unassign startup script from machine
     * @description Unassign a startup script from a machine.
     */
    post: operations["startupScripts-unassign"];
  };
  "/storage": {
    /**
     * List storage providers
     * @description List storage providers
     */
    get: operations["storageProviders-list"];
    /**
     * Create a storage provider
     * @description Create a storage provider
     */
    post: operations["storageProviders-create"];
  };
  "/storage/{id}": {
    /**
     * Get a storage provider
     * @description Get a storage provider
     */
    get: operations["storageProviders-get"];
    /**
     * Update a storage provider
     * @description Update a storage provider
     */
    put: operations["storageProviders-update"];
    /**
     * Delete a storage provider
     * @description Delete a storage provider
     */
    delete: operations["storageProviders-delete"];
  };
  "/storage/utilization": {
    /**
     * Get storage utilization
     * @description Get a breakdown of how storage is being used by your team
     */
    get: operations["storageUtilization-getPublic"];
  };
  "/teams/{id}/secrets": {
    /**
     * List a team's secrets
     * @description Fetches a list of secrets for a team.
     */
    get: operations["teamSecrets-list"];
    /**
     * Create a team secret
     * @description Creates a new secret for a team.
     */
    post: operations["teamSecrets-create"];
  };
  "/teams/{id}/secrets/{name}": {
    /**
     * Get a team secret
     * @description Fetches a secret for a team.
     */
    get: operations["teamSecrets-get"];
    /**
     * Delete a team secret
     * @description Deletes a secret for a team.
     */
    delete: operations["teamSecrets-delete"];
    /**
     * Update a team secret
     * @description Update the value of a secret for a team.
     */
    patch: operations["teamSecrets-update"];
  };
  "/templates": {
    /**
     * List templates
     * @description Fetches a list of templates.
     */
    get: operations["templates-list"];
    /**
     * Create template
     * @description Create a template for a machine.
     */
    post: operations["templates-create"];
  };
  "/templates/{id}": {
    /**
     * Get a template
     * @description Fetches a single template by ID.
     */
    get: operations["templates-get"];
    /**
     * Update a template
     * @description Updates a single template by ID.
     */
    put: operations["templates-update"];
    /**
     * Delete template
     * @description Delete a template.
     */
    delete: operations["templates-delete"];
  };
  "/workflows/{id}/runs/{runId}/logs": {
    /**
     * List workflow run logs
     * @description Lists logs for a given workflow run.
     */
    get: operations["workflowRunLogs-list"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: {
    /** @description Error response */
    readonly error: {
      content: {
        readonly "application/json": {
          readonly code: string;
          readonly issues?: readonly ({
            readonly message: string;
          })[];
          readonly message: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  /**
   * Create an app
   * @description Create an app.
   */
  "apps-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The new deployment configuration. */
          readonly config:
            | (
              | ({
                /** @enum {string} */
                readonly apiVersion: "v0alpha0";
                readonly command?: readonly (string)[];
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled?: boolean;
                readonly env?: readonly ({
                  readonly name: string;
                  readonly value: string;
                })[];
                readonly healthChecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly models?: readonly ({
                  readonly id: string;
                  readonly path?: string;
                })[];
                readonly name: string;
                /** @default 80 */
                readonly port?: number;
                readonly region?: string;
                readonly repositories?: {
                  readonly dataset: string;
                  readonly mountPath?: string;
                  readonly repositories: readonly ({
                    readonly name: string;
                    readonly password?: string;
                    readonly ref?: string;
                    readonly url: string;
                    readonly username?: string;
                  })[];
                };
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly (
                      | {
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }
                      | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      })
                    )[];
                  };
                  readonly instanceType: string;
                  /** @default 1 */
                  readonly replicas?: number;
                };
              })
              | ({
                /** @enum {string} */
                readonly apiVersion: "v0alpha1";
                readonly command?: readonly (string)[];
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled?: boolean;
                readonly env?: readonly ({
                  readonly name: string;
                  readonly value: string;
                })[];
                readonly healthchecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly healthChecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly integrations?: readonly ({
                  readonly id: string;
                  readonly name: string;
                  /** @default /opt/models */
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "model";
                } | {
                  readonly accessKeyId: string;
                  readonly endpoint?: string;
                  readonly name: string;
                  readonly path?: string;
                  readonly region?: string;
                  readonly secretAccessKey: string;
                  /** @enum {string} */
                  readonly type: "s3";
                  readonly url: string;
                } | {
                  readonly name: string;
                  /** @enum {string} */
                  readonly type: "volume";
                } | {
                  readonly name: string;
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "git-lfs";
                  /** Format: uri */
                  readonly url: string;
                })[];
                readonly name: string;
                readonly region?: string;
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly (
                      | {
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }
                      | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      })
                    )[];
                  };
                  readonly machineType: string;
                  readonly ports: readonly (number)[];
                  /** @default 1 */
                  readonly replicas?: number;
                };
              })
            )
            | ({
              readonly apiVersion: "v1" | "latest";
              readonly command?: readonly (string)[];
              readonly containerRegistry?: string;
              /** @default true */
              readonly enabled?: boolean;
              readonly env?: readonly ({
                readonly name: string;
                readonly value: string;
              })[];
              readonly healthchecks?: {
                readonly liveness?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
                readonly readiness?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
                readonly startup?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
              };
              readonly healthChecks?: {
                readonly liveness?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
                readonly readiness?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
                readonly startup?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
              };
              readonly image: string;
              readonly integrations?: readonly ({
                readonly id: string;
                readonly name: string;
                /** @default /opt/models */
                readonly path?: string;
                /** @enum {string} */
                readonly type: "model";
              } | {
                readonly accessKeyId: string;
                readonly endpoint?: string;
                readonly name: string;
                readonly path?: string;
                readonly region?: string;
                readonly secretAccessKey: string;
                /** @enum {string} */
                readonly type: "s3";
                readonly url: string;
              } | {
                readonly name: string;
                /** @enum {string} */
                readonly type: "volume";
              } | {
                readonly name: string;
                readonly path?: string;
                /** @enum {string} */
                readonly type: "git-lfs";
                /** Format: uri */
                readonly url: string;
              })[];
              readonly name: string;
              readonly region?: string;
              readonly resources: {
                readonly autoscaling?: {
                  readonly enabled?: boolean;
                  readonly maxReplicas: number;
                  readonly metrics: readonly (
                    | {
                      /** @enum {string} */
                      readonly metric: "requestDuration";
                      /** @enum {string} */
                      readonly summary: "average";
                      readonly value: number;
                    }
                    | ({
                      /** @enum {string} */
                      readonly metric: "cpu" | "memory";
                      /** @enum {string} */
                      readonly summary: "average";
                      readonly value: number;
                    })
                  )[];
                };
                readonly machineType: string;
                readonly ports: readonly (number)[];
                /** @default 1 */
                readonly replicas?: number;
              };
            });
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The new deployment configuration. */
            readonly config:
              | (
                | ({
                  /** @enum {string} */
                  readonly apiVersion: "v0alpha0";
                  readonly command?: readonly (string)[];
                  readonly containerRegistry?: string;
                  /** @default true */
                  readonly enabled?: boolean;
                  readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly healthChecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly image: string;
                  readonly models?: readonly ({
                    readonly id: string;
                    readonly path?: string;
                  })[];
                  readonly name: string;
                  /** @default 80 */
                  readonly port?: number;
                  readonly region?: string;
                  readonly repositories?: {
                    readonly dataset: string;
                    readonly mountPath?: string;
                    readonly repositories: readonly ({
                      readonly name: string;
                      readonly password?: string;
                      readonly ref?: string;
                      readonly url: string;
                      readonly username?: string;
                    })[];
                  };
                  readonly resources: {
                    readonly autoscaling?: {
                      readonly enabled?: boolean;
                      readonly maxReplicas: number;
                      readonly metrics: readonly (
                        | {
                          /** @enum {string} */
                          readonly metric: "requestDuration";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        }
                        | ({
                          /** @enum {string} */
                          readonly metric: "cpu" | "memory";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        })
                      )[];
                    };
                    readonly instanceType: string;
                    /** @default 1 */
                    readonly replicas?: number;
                  };
                })
                | ({
                  /** @enum {string} */
                  readonly apiVersion: "v0alpha1";
                  readonly command?: readonly (string)[];
                  readonly containerRegistry?: string;
                  /** @default true */
                  readonly enabled?: boolean;
                  readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly healthchecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly healthChecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly image: string;
                  readonly integrations?: readonly ({
                    readonly id: string;
                    readonly name: string;
                    /** @default /opt/models */
                    readonly path?: string;
                    /** @enum {string} */
                    readonly type: "model";
                  } | {
                    readonly accessKeyId: string;
                    readonly endpoint?: string;
                    readonly name: string;
                    readonly path?: string;
                    readonly region?: string;
                    readonly secretAccessKey: string;
                    /** @enum {string} */
                    readonly type: "s3";
                    readonly url: string;
                  } | {
                    readonly name: string;
                    /** @enum {string} */
                    readonly type: "volume";
                  } | {
                    readonly name: string;
                    readonly path?: string;
                    /** @enum {string} */
                    readonly type: "git-lfs";
                    /** Format: uri */
                    readonly url: string;
                  })[];
                  readonly name: string;
                  readonly region?: string;
                  readonly resources: {
                    readonly autoscaling?: {
                      readonly enabled?: boolean;
                      readonly maxReplicas: number;
                      readonly metrics: readonly (
                        | {
                          /** @enum {string} */
                          readonly metric: "requestDuration";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        }
                        | ({
                          /** @enum {string} */
                          readonly metric: "cpu" | "memory";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        })
                      )[];
                    };
                    readonly machineType: string;
                    readonly ports: readonly (number)[];
                    /** @default 1 */
                    readonly replicas?: number;
                  };
                })
              )
              | ({
                readonly apiVersion: "v1" | "latest";
                readonly command?: readonly (string)[];
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled?: boolean;
                readonly env?: readonly ({
                  readonly name: string;
                  readonly value: string;
                })[];
                readonly healthchecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly healthChecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly integrations?: readonly ({
                  readonly id: string;
                  readonly name: string;
                  /** @default /opt/models */
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "model";
                } | {
                  readonly accessKeyId: string;
                  readonly endpoint?: string;
                  readonly name: string;
                  readonly path?: string;
                  readonly region?: string;
                  readonly secretAccessKey: string;
                  /** @enum {string} */
                  readonly type: "s3";
                  readonly url: string;
                } | {
                  readonly name: string;
                  /** @enum {string} */
                  readonly type: "volume";
                } | {
                  readonly name: string;
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "git-lfs";
                  /** Format: uri */
                  readonly url: string;
                })[];
                readonly name: string;
                readonly region?: string;
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly (
                      | {
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }
                      | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      })
                    )[];
                  };
                  readonly machineType: string;
                  readonly ports: readonly (number)[];
                  /** @default 1 */
                  readonly replicas?: number;
                };
              });
            /** @description The ID of the app */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get an app
   * @description Fetches an app.
   */
  "apps-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the app to fetch */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The new deployment configuration. */
            readonly config:
              | (
                | ({
                  /** @enum {string} */
                  readonly apiVersion: "v0alpha0";
                  readonly command?: readonly (string)[];
                  readonly containerRegistry?: string;
                  /** @default true */
                  readonly enabled?: boolean;
                  readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly healthChecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly image: string;
                  readonly models?: readonly ({
                    readonly id: string;
                    readonly path?: string;
                  })[];
                  readonly name: string;
                  /** @default 80 */
                  readonly port?: number;
                  readonly region?: string;
                  readonly repositories?: {
                    readonly dataset: string;
                    readonly mountPath?: string;
                    readonly repositories: readonly ({
                      readonly name: string;
                      readonly password?: string;
                      readonly ref?: string;
                      readonly url: string;
                      readonly username?: string;
                    })[];
                  };
                  readonly resources: {
                    readonly autoscaling?: {
                      readonly enabled?: boolean;
                      readonly maxReplicas: number;
                      readonly metrics: readonly (
                        | {
                          /** @enum {string} */
                          readonly metric: "requestDuration";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        }
                        | ({
                          /** @enum {string} */
                          readonly metric: "cpu" | "memory";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        })
                      )[];
                    };
                    readonly instanceType: string;
                    /** @default 1 */
                    readonly replicas?: number;
                  };
                })
                | ({
                  /** @enum {string} */
                  readonly apiVersion: "v0alpha1";
                  readonly command?: readonly (string)[];
                  readonly containerRegistry?: string;
                  /** @default true */
                  readonly enabled?: boolean;
                  readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly healthchecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly healthChecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly image: string;
                  readonly integrations?: readonly ({
                    readonly id: string;
                    readonly name: string;
                    /** @default /opt/models */
                    readonly path?: string;
                    /** @enum {string} */
                    readonly type: "model";
                  } | {
                    readonly accessKeyId: string;
                    readonly endpoint?: string;
                    readonly name: string;
                    readonly path?: string;
                    readonly region?: string;
                    readonly secretAccessKey: string;
                    /** @enum {string} */
                    readonly type: "s3";
                    readonly url: string;
                  } | {
                    readonly name: string;
                    /** @enum {string} */
                    readonly type: "volume";
                  } | {
                    readonly name: string;
                    readonly path?: string;
                    /** @enum {string} */
                    readonly type: "git-lfs";
                    /** Format: uri */
                    readonly url: string;
                  })[];
                  readonly name: string;
                  readonly region?: string;
                  readonly resources: {
                    readonly autoscaling?: {
                      readonly enabled?: boolean;
                      readonly maxReplicas: number;
                      readonly metrics: readonly (
                        | {
                          /** @enum {string} */
                          readonly metric: "requestDuration";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        }
                        | ({
                          /** @enum {string} */
                          readonly metric: "cpu" | "memory";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        })
                      )[];
                    };
                    readonly machineType: string;
                    readonly ports: readonly (number)[];
                    /** @default 1 */
                    readonly replicas?: number;
                  };
                })
              )
              | ({
                readonly apiVersion: "v1" | "latest";
                readonly command?: readonly (string)[];
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled?: boolean;
                readonly env?: readonly ({
                  readonly name: string;
                  readonly value: string;
                })[];
                readonly healthchecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly healthChecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly integrations?: readonly ({
                  readonly id: string;
                  readonly name: string;
                  /** @default /opt/models */
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "model";
                } | {
                  readonly accessKeyId: string;
                  readonly endpoint?: string;
                  readonly name: string;
                  readonly path?: string;
                  readonly region?: string;
                  readonly secretAccessKey: string;
                  /** @enum {string} */
                  readonly type: "s3";
                  readonly url: string;
                } | {
                  readonly name: string;
                  /** @enum {string} */
                  readonly type: "volume";
                } | {
                  readonly name: string;
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "git-lfs";
                  /** Format: uri */
                  readonly url: string;
                })[];
                readonly name: string;
                readonly region?: string;
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly (
                      | {
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }
                      | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      })
                    )[];
                  };
                  readonly machineType: string;
                  readonly ports: readonly (number)[];
                  /** @default 1 */
                  readonly replicas?: number;
                };
              });
            /** @description The ID of the app */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete an app
   * @description Deletes an app. This will delete all resources associated with the app.
   */
  "apps-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the app to delete */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the app that was deleted */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Disable an app
   * @description Disables an app that is currently enabled. This will stop the app's deployments and make it unavailable to users.
   */
  "apps-disable": {
    parameters: {
      readonly path: {
        /** @description The ID of the app to disable */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The new deployment configuration. */
            readonly config:
              | (
                | ({
                  /** @enum {string} */
                  readonly apiVersion: "v0alpha0";
                  readonly command?: readonly (string)[];
                  readonly containerRegistry?: string;
                  /** @default true */
                  readonly enabled?: boolean;
                  readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly healthChecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly image: string;
                  readonly models?: readonly ({
                    readonly id: string;
                    readonly path?: string;
                  })[];
                  readonly name: string;
                  /** @default 80 */
                  readonly port?: number;
                  readonly region?: string;
                  readonly repositories?: {
                    readonly dataset: string;
                    readonly mountPath?: string;
                    readonly repositories: readonly ({
                      readonly name: string;
                      readonly password?: string;
                      readonly ref?: string;
                      readonly url: string;
                      readonly username?: string;
                    })[];
                  };
                  readonly resources: {
                    readonly autoscaling?: {
                      readonly enabled?: boolean;
                      readonly maxReplicas: number;
                      readonly metrics: readonly (
                        | {
                          /** @enum {string} */
                          readonly metric: "requestDuration";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        }
                        | ({
                          /** @enum {string} */
                          readonly metric: "cpu" | "memory";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        })
                      )[];
                    };
                    readonly instanceType: string;
                    /** @default 1 */
                    readonly replicas?: number;
                  };
                })
                | ({
                  /** @enum {string} */
                  readonly apiVersion: "v0alpha1";
                  readonly command?: readonly (string)[];
                  readonly containerRegistry?: string;
                  /** @default true */
                  readonly enabled?: boolean;
                  readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly healthchecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly healthChecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly image: string;
                  readonly integrations?: readonly ({
                    readonly id: string;
                    readonly name: string;
                    /** @default /opt/models */
                    readonly path?: string;
                    /** @enum {string} */
                    readonly type: "model";
                  } | {
                    readonly accessKeyId: string;
                    readonly endpoint?: string;
                    readonly name: string;
                    readonly path?: string;
                    readonly region?: string;
                    readonly secretAccessKey: string;
                    /** @enum {string} */
                    readonly type: "s3";
                    readonly url: string;
                  } | {
                    readonly name: string;
                    /** @enum {string} */
                    readonly type: "volume";
                  } | {
                    readonly name: string;
                    readonly path?: string;
                    /** @enum {string} */
                    readonly type: "git-lfs";
                    /** Format: uri */
                    readonly url: string;
                  })[];
                  readonly name: string;
                  readonly region?: string;
                  readonly resources: {
                    readonly autoscaling?: {
                      readonly enabled?: boolean;
                      readonly maxReplicas: number;
                      readonly metrics: readonly (
                        | {
                          /** @enum {string} */
                          readonly metric: "requestDuration";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        }
                        | ({
                          /** @enum {string} */
                          readonly metric: "cpu" | "memory";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        })
                      )[];
                    };
                    readonly machineType: string;
                    readonly ports: readonly (number)[];
                    /** @default 1 */
                    readonly replicas?: number;
                  };
                })
              )
              | ({
                readonly apiVersion: "v1" | "latest";
                readonly command?: readonly (string)[];
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled?: boolean;
                readonly env?: readonly ({
                  readonly name: string;
                  readonly value: string;
                })[];
                readonly healthchecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly healthChecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly integrations?: readonly ({
                  readonly id: string;
                  readonly name: string;
                  /** @default /opt/models */
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "model";
                } | {
                  readonly accessKeyId: string;
                  readonly endpoint?: string;
                  readonly name: string;
                  readonly path?: string;
                  readonly region?: string;
                  readonly secretAccessKey: string;
                  /** @enum {string} */
                  readonly type: "s3";
                  readonly url: string;
                } | {
                  readonly name: string;
                  /** @enum {string} */
                  readonly type: "volume";
                } | {
                  readonly name: string;
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "git-lfs";
                  /** Format: uri */
                  readonly url: string;
                })[];
                readonly name: string;
                readonly region?: string;
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly (
                      | {
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }
                      | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      })
                    )[];
                  };
                  readonly machineType: string;
                  readonly ports: readonly (number)[];
                  /** @default 1 */
                  readonly replicas?: number;
                };
              });
            /** @description The ID of the app */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Enable an app
   * @description Enables an app that has been previously disabled. This will start the app and make it available to users.
   */
  "apps-enable": {
    parameters: {
      readonly path: {
        /** @description The ID of the app to enable */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The new deployment configuration. */
            readonly config:
              | (
                | ({
                  /** @enum {string} */
                  readonly apiVersion: "v0alpha0";
                  readonly command?: readonly (string)[];
                  readonly containerRegistry?: string;
                  /** @default true */
                  readonly enabled?: boolean;
                  readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly healthChecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly image: string;
                  readonly models?: readonly ({
                    readonly id: string;
                    readonly path?: string;
                  })[];
                  readonly name: string;
                  /** @default 80 */
                  readonly port?: number;
                  readonly region?: string;
                  readonly repositories?: {
                    readonly dataset: string;
                    readonly mountPath?: string;
                    readonly repositories: readonly ({
                      readonly name: string;
                      readonly password?: string;
                      readonly ref?: string;
                      readonly url: string;
                      readonly username?: string;
                    })[];
                  };
                  readonly resources: {
                    readonly autoscaling?: {
                      readonly enabled?: boolean;
                      readonly maxReplicas: number;
                      readonly metrics: readonly (
                        | {
                          /** @enum {string} */
                          readonly metric: "requestDuration";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        }
                        | ({
                          /** @enum {string} */
                          readonly metric: "cpu" | "memory";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        })
                      )[];
                    };
                    readonly instanceType: string;
                    /** @default 1 */
                    readonly replicas?: number;
                  };
                })
                | ({
                  /** @enum {string} */
                  readonly apiVersion: "v0alpha1";
                  readonly command?: readonly (string)[];
                  readonly containerRegistry?: string;
                  /** @default true */
                  readonly enabled?: boolean;
                  readonly env?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly healthchecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly healthChecks?: {
                    readonly liveness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly readiness?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                    readonly startup?: {
                      readonly failureThreshold?: number;
                      readonly headers?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly host?: string;
                      readonly initialDelaySeconds?: number;
                      readonly path: string;
                      readonly periodSeconds?: number;
                      readonly port?: number;
                      readonly timeoutSeconds?: number;
                    } | {
                      readonly exec: {
                        readonly command: readonly (string)[];
                      };
                      readonly failureThreshold?: number;
                      readonly initialDelaySeconds?: number;
                      readonly periodSeconds?: number;
                      readonly timeoutSeconds?: number;
                    };
                  };
                  readonly image: string;
                  readonly integrations?: readonly ({
                    readonly id: string;
                    readonly name: string;
                    /** @default /opt/models */
                    readonly path?: string;
                    /** @enum {string} */
                    readonly type: "model";
                  } | {
                    readonly accessKeyId: string;
                    readonly endpoint?: string;
                    readonly name: string;
                    readonly path?: string;
                    readonly region?: string;
                    readonly secretAccessKey: string;
                    /** @enum {string} */
                    readonly type: "s3";
                    readonly url: string;
                  } | {
                    readonly name: string;
                    /** @enum {string} */
                    readonly type: "volume";
                  } | {
                    readonly name: string;
                    readonly path?: string;
                    /** @enum {string} */
                    readonly type: "git-lfs";
                    /** Format: uri */
                    readonly url: string;
                  })[];
                  readonly name: string;
                  readonly region?: string;
                  readonly resources: {
                    readonly autoscaling?: {
                      readonly enabled?: boolean;
                      readonly maxReplicas: number;
                      readonly metrics: readonly (
                        | {
                          /** @enum {string} */
                          readonly metric: "requestDuration";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        }
                        | ({
                          /** @enum {string} */
                          readonly metric: "cpu" | "memory";
                          /** @enum {string} */
                          readonly summary: "average";
                          readonly value: number;
                        })
                      )[];
                    };
                    readonly machineType: string;
                    readonly ports: readonly (number)[];
                    /** @default 1 */
                    readonly replicas?: number;
                  };
                })
              )
              | ({
                readonly apiVersion: "v1" | "latest";
                readonly command?: readonly (string)[];
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled?: boolean;
                readonly env?: readonly ({
                  readonly name: string;
                  readonly value: string;
                })[];
                readonly healthchecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly healthChecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly integrations?: readonly ({
                  readonly id: string;
                  readonly name: string;
                  /** @default /opt/models */
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "model";
                } | {
                  readonly accessKeyId: string;
                  readonly endpoint?: string;
                  readonly name: string;
                  readonly path?: string;
                  readonly region?: string;
                  readonly secretAccessKey: string;
                  /** @enum {string} */
                  readonly type: "s3";
                  readonly url: string;
                } | {
                  readonly name: string;
                  /** @enum {string} */
                  readonly type: "volume";
                } | {
                  readonly name: string;
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "git-lfs";
                  /** Format: uri */
                  readonly url: string;
                })[];
                readonly name: string;
                readonly region?: string;
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly (
                      | {
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }
                      | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      })
                    )[];
                  };
                  readonly machineType: string;
                  readonly ports: readonly (number)[];
                  /** @default 1 */
                  readonly replicas?: number;
                };
              });
            /** @description The ID of the app */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update an app's name
   * @description Change the name of an app
   */
  "apps-updateName": {
    parameters: {
      readonly path: {
        /** @description The ID of the app to update */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The new name of the app */
          readonly name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the app */
            readonly id: string;
            /** @description The name of the app */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get the current session
   * @description Get the current session. If a user is not logged in, this will be null. Otherwise, it will contain the current team and user.
   */
  "auth-session": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json":
            | ({
              readonly team: {
                /** @description An internal, numeric ID for the team */
                readonly analyticsId: number;
                /** @description A unique ID for the team */
                readonly id: string;
                /** @description Whether the team is private or not */
                readonly isPrivate: boolean;
                /** @description The maximum number of machines */
                readonly maxMachines: number;
                /** @description The namespace for the team */
                readonly namespace: string;
              };
              readonly user: {
                /** @description An internal, numeric ID for the user */
                readonly analyticsId: number;
                /**
                 * Format: date-time
                 * @description The date the account was confirmed
                 */
                readonly dtConfirmed: Date;
                /**
                 * Format: date-time
                 * @description The date the user was created
                 */
                readonly dtCreated: Date;
                /** @description The user's email address */
                readonly email: string;
                /** @description The user's first name */
                readonly firstName: string | null;
                /** @description A unique ID for the user */
                readonly id: string;
                /** @description Whether the user has a password set */
                readonly isPasswordAuthEnabled: boolean;
                /** @description Whether the user's phone number has been verified */
                readonly isPhoneVerified: boolean;
                /** @description Whether the user has a QR code based MFA confirmed */
                readonly isQrCodeBasedMfaConfirmed: boolean;
                /** @description Whether the user has a QR code based MFA enabled */
                readonly isQrCodeBasedMfaEnabled: boolean;
                /** @description The user's last name */
                readonly lastName: string | null;
                /** @description Metadata about the user */
                readonly metadata: {
                  /**
                   * @description Core survey question-answer pairs
                   * @default null
                   */
                  readonly coreSurvey?:
                    | ({
                      [key: string]: string | undefined;
                    })
                    | null;
                  /**
                   * @description Gradient survey question-answer pairs
                   * @default null
                   */
                  readonly gradientSurvey?:
                    | ({
                      [key: string]: string | undefined;
                    })
                    | null;
                  /**
                   * @description Whether the user has accepted the Graphcore terms of service
                   * @default false
                   */
                  readonly graphcoreTermsAccepted?: boolean;
                  /**
                   * @description Tags for the user
                   * @default null
                   */
                  readonly tags?: string | null;
                };
                /**
                 * @description The user's preferences
                 * @default null
                 */
                readonly preferences?:
                  | ({
                    readonly defaultProduct?: string | null;
                    readonly defaultTeamId?: string | null;
                    readonly disableHotkeys?: boolean | null;
                    readonly fontSize?: number | null;
                    /** @enum {string|null} */
                    readonly theme?: "light" | "dark" | null;
                  })
                  | null;
                /** @description The teams this user is a member of */
                readonly teamMemberships: readonly ({
                  /** @description Whether the user is an admin of the team */
                  readonly isAdmin: boolean;
                  /** @description Whether the user is the owner of the team */
                  readonly isOwner: boolean;
                  /** @description The team the user is a member of */
                  readonly team: {
                    /**
                     * Format: date-time
                     * @description The date the team was created
                     */
                    readonly dtCreated: Date;
                    /** @description The ID of the team */
                    readonly id: string;
                    /** @description Whether the team is the user's team */
                    readonly isUserTeam: boolean;
                    /** @description The name of the team */
                    readonly name: string;
                    /** @description The namespace of the team */
                    readonly namespace: string;
                    /**
                     * @description The URL of the team's profile image.
                     * @default null
                     */
                    readonly publicProfileImageUrl?: string | null;
                  };
                })[];
              };
            })
            | null;
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List autoscaling groups
   * @description List autoscaling groups and filter by machine type.
   */
  "autoscalingGroups-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description Cluster the autoscaling group is for. */
        clusterId?: string;
        /** @description Machine type used for machiens in the autoscaling group. */
        machineType?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The ID of the cluster the autoscaling group is for. */
              readonly clusterId: string;
              /** @description The current number of machines in the autoscaling group. */
              readonly current: number;
              /**
               * Format: date-time
               * @description The date the autoscaling group was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the autoscaling group was deleted.
               */
              readonly dtDeleted: Date;
              /**
               * Format: date-time
               * @description The date the autoscaling group was last modified.
               */
              readonly dtModified: Date;
              /** @description The ID of the autoscaling group. */
              readonly id: string;
              /** @description The ID of the user who last edited the autoscaling group. */
              readonly lastEditedByUserId: string | null;
              /** @description The machine type used by machines in the autoscaling group. */
              readonly machineType: string;
              /** @description The maximum number of machines in the autoscaling group. */
              readonly max: number;
              /** @description The minimum number of machines in the autoscaling group. */
              readonly min: number;
              /** @description The name of the autoscaling group. */
              readonly name: string;
              /** @description The ID of the network used by machines in the autoscaling group. */
              readonly networkId: string;
              /** @description The timeout for provisioning machines in the autoscaling group, in minutes. */
              readonly provisioningTimeout: number | null;
              /** @description The ID of the startup script used by machines in the autoscaling group. */
              readonly startupScriptId: string | null;
              /** @description The ID of the template used by machines in the autoscaling group. */
              readonly templateId: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create an autoscaling group
   * @description Create an autoscaling group.
   */
  "autoscalingGroups-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The cluster the autoscaling group is for. */
          readonly clusterId: string;
          /** @description The machine type used for machines in the autoscaling group. */
          readonly machineType: string;
          /** @description The maximum number of machines in the autoscaling group. */
          readonly max: number;
          /** @description The minimum number of machines in the autoscaling group. */
          readonly min: number;
          /** @description The name of the autoscaling group. */
          readonly name: string;
          /** @description The network the autoscaling group is in. */
          readonly networkId: string;
          /** @description The timeout for provisioning machines in the autoscaling group. */
          readonly provisioningTimeout?: number;
          /** @description The startup script used for machines in the autoscaling group. */
          readonly startupScriptId?: string;
          /** @description The template used for machines in the autoscaling group. */
          readonly templateId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the cluster the autoscaling group is for. */
            readonly clusterId: string;
            /** @description The current number of machines in the autoscaling group. */
            readonly current: number;
            /**
             * Format: date-time
             * @description The date the autoscaling group was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the autoscaling group was deleted.
             */
            readonly dtDeleted: Date;
            /**
             * Format: date-time
             * @description The date the autoscaling group was last modified.
             */
            readonly dtModified: Date;
            /** @description The ID of the autoscaling group. */
            readonly id: string;
            /** @description The ID of the user who last edited the autoscaling group. */
            readonly lastEditedByUserId: string | null;
            /** @description The machine type used by machines in the autoscaling group. */
            readonly machineType: string;
            /** @description The maximum number of machines in the autoscaling group. */
            readonly max: number;
            /** @description The minimum number of machines in the autoscaling group. */
            readonly min: number;
            /** @description The name of the autoscaling group. */
            readonly name: string;
            /** @description The ID of the network used by machines in the autoscaling group. */
            readonly networkId: string;
            /** @description The timeout for provisioning machines in the autoscaling group, in minutes. */
            readonly provisioningTimeout: number | null;
            /** @description The ID of the startup script used by machines in the autoscaling group. */
            readonly startupScriptId: string | null;
            /** @description The ID of the template used by machines in the autoscaling group. */
            readonly templateId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get an autoscaling group
   * @description Fetches a single autoscaling group by id.
   */
  "autoscalingGroups-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the autoscaling group to fetch. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the cluster the autoscaling group is for. */
            readonly clusterId: string;
            /** @description The current number of machines in the autoscaling group. */
            readonly current: number;
            /**
             * Format: date-time
             * @description The date the autoscaling group was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the autoscaling group was deleted.
             */
            readonly dtDeleted: Date;
            /**
             * Format: date-time
             * @description The date the autoscaling group was last modified.
             */
            readonly dtModified: Date;
            /** @description The ID of the autoscaling group. */
            readonly id: string;
            /** @description The ID of the user who last edited the autoscaling group. */
            readonly lastEditedByUserId: string | null;
            /** @description The machine type used by machines in the autoscaling group. */
            readonly machineType: string;
            /** @description The maximum number of machines in the autoscaling group. */
            readonly max: number;
            /** @description The minimum number of machines in the autoscaling group. */
            readonly min: number;
            /** @description The name of the autoscaling group. */
            readonly name: string;
            /** @description The ID of the network used by machines in the autoscaling group. */
            readonly networkId: string;
            /** @description The timeout for provisioning machines in the autoscaling group, in minutes. */
            readonly provisioningTimeout: number | null;
            /** @description The ID of the startup script used by machines in the autoscaling group. */
            readonly startupScriptId: string | null;
            /** @description The ID of the template used by machines in the autoscaling group. */
            readonly templateId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update an autoscaling group
   * @description Update an autoscaling group.
   */
  "autoscalingGroups-update": {
    parameters: {
      readonly path: {
        /** @description The id of the autoscaling group. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The cluster the autoscaling group is for. */
          readonly clusterId?: string;
          /** @description The target number of machines in the autoscaling group. */
          readonly current?: number;
          /** @description The machine type used for machines in the autoscaling group. */
          readonly machineType?: string;
          /** @description The maximum number of machines in the autoscaling group. */
          readonly max?: number;
          /** @description The minimum number of machines in the autoscaling group. */
          readonly min?: number;
          /** @description The name of the autoscaling group. */
          readonly name?: string;
          /** @description The network the autoscaling group is in. */
          readonly networkId?: string;
          /** @description The timeout for provisioning machines in the autoscaling group. */
          readonly provisioningTimeout?: number;
          /** @description The startup script used for machines in the autoscaling group. */
          readonly startupScriptId?: string;
          /** @description The template used for machines in the autoscaling group. */
          readonly templateId?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the cluster the autoscaling group is for. */
            readonly clusterId: string;
            /** @description The current number of machines in the autoscaling group. */
            readonly current: number;
            /**
             * Format: date-time
             * @description The date the autoscaling group was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the autoscaling group was deleted.
             */
            readonly dtDeleted: Date;
            /**
             * Format: date-time
             * @description The date the autoscaling group was last modified.
             */
            readonly dtModified: Date;
            /** @description The ID of the autoscaling group. */
            readonly id: string;
            /** @description The ID of the user who last edited the autoscaling group. */
            readonly lastEditedByUserId: string | null;
            /** @description The machine type used by machines in the autoscaling group. */
            readonly machineType: string;
            /** @description The maximum number of machines in the autoscaling group. */
            readonly max: number;
            /** @description The minimum number of machines in the autoscaling group. */
            readonly min: number;
            /** @description The name of the autoscaling group. */
            readonly name: string;
            /** @description The ID of the network used by machines in the autoscaling group. */
            readonly networkId: string;
            /** @description The timeout for provisioning machines in the autoscaling group, in minutes. */
            readonly provisioningTimeout: number | null;
            /** @description The ID of the startup script used by machines in the autoscaling group. */
            readonly startupScriptId: string | null;
            /** @description The ID of the template used by machines in the autoscaling group. */
            readonly templateId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete an autoscaling group
   * @description Delete an autoscaling group.
   */
  "autoscalingGroups-delete": {
    parameters: {
      readonly path: {
        /** @description The id of the autoscaling group. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The id of the autoscaling group. */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get account standing
   * @description Check whether the current team account is in good standing. If not, send back a message explaining why.
   */
  "billingAccountStanding-get": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether the account is in good standing */
            readonly isInGoodStanding: boolean;
            /** @description If the account is not in good standing, these are messages explaining why. */
            readonly messages: readonly (string)[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List container registries
   * @description Lists container registries for the current team.
   */
  "containerRegistries-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the container registry was created
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the container registry was last modified
               */
              readonly dtModified: Date;
              /** @description The id of the container registry */
              readonly id: string;
              /** @description The name of the container registry */
              readonly name: string;
              /** @description The namespace of the container registry */
              readonly namespace: string;
              /** @description The URL of the container registry */
              readonly url: string;
              /** @description A username for the container registry */
              readonly username: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a container registry
   * @description Creates a container registry for the current team.
   */
  "containerRegistries-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the container registry */
          readonly name: string;
          /** @description The namespace of the container registry */
          readonly namespace: string;
          /** @description The password for the registry */
          readonly password: string;
          /**
           * Format: uri
           * @description The URL of the container registry
           */
          readonly url: string;
          /** @description A username for the container registry */
          readonly username: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the container registry was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the container registry was last modified
             */
            readonly dtModified: Date;
            /** @description The id of the container registry */
            readonly id: string;
            /** @description The name of the container registry */
            readonly name: string;
            /** @description The namespace of the container registry */
            readonly namespace: string;
            /** @description The URL of the container registry */
            readonly url: string;
            /** @description A username for the container registry */
            readonly username: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List container registries
   * @description Lists container registries for the current team.
   */
  "containerRegistries-get": {
    parameters: {
      readonly path: {
        /** @description The id of the container registry */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the container registry was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the container registry was last modified
             */
            readonly dtModified: Date;
            /** @description The id of the container registry */
            readonly id: string;
            /** @description The name of the container registry */
            readonly name: string;
            /** @description The namespace of the container registry */
            readonly namespace: string;
            /** @description The URL of the container registry */
            readonly url: string;
            /** @description A username for the container registry */
            readonly username: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a container registry
   * @description Updates a container registry for the current team.
   */
  "containerRegistries-update": {
    parameters: {
      readonly path: {
        /** @description The id of the container registry */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the container registry */
          readonly name?: string;
          /** @description The namespace of the container registry */
          readonly namespace?: string;
          /** @description An updated password for the registry */
          readonly password?: string;
          /**
           * Format: uri
           * @description The URL of the container registry
           */
          readonly url?: string;
          /** @description A username for the container registry */
          readonly username?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the container registry was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the container registry was last modified
             */
            readonly dtModified: Date;
            /** @description The id of the container registry */
            readonly id: string;
            /** @description The name of the container registry */
            readonly name: string;
            /** @description The namespace of the container registry */
            readonly namespace: string;
            /** @description The URL of the container registry */
            readonly url: string;
            /** @description A username for the container registry */
            readonly username: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a container registry
   * @description Deletes a container registry for the current team.
   */
  "containerRegistries-delete": {
    parameters: {
      readonly path: {
        /** @description The id of the container registry */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the container registry was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the container registry was last modified
             */
            readonly dtModified: Date;
            /** @description The id of the container registry */
            readonly id: string;
            /** @description The name of the container registry */
            readonly name: string;
            /** @description The namespace of the container registry */
            readonly namespace: string;
            /** @description The URL of the container registry */
            readonly url: string;
            /** @description A username for the container registry */
            readonly username: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Test a container registry connection
   * @description Validate that a container registry can be connected to using the provided credentials.
   */
  "containerRegistries-testConnection": {
    parameters: {
      readonly path: {
        /** @description The id of the container registry */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The error message, if any */
            readonly error?: string;
            /** @description Whether the connection was successful */
            readonly success: boolean;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List deployments
   * @description Fetches a list of deployments for a logged in user.
   */
  "deployments-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the deployment was created
               */
              readonly dtCreated: Date;
              /** @description The unique endpoint for the deployment */
              readonly endpoint: string;
              /** @description The ID of the deployment */
              readonly id: string;
              /**
               * @description The latest deployment configuration. If invalid, null is returned.
               * @default null
               */
              readonly latestSpec?:
                | ({
                  /** @description The data for the deployment spec */
                  readonly data?:
                    | (
                      | (
                        | ({
                          /** @enum {string} */
                          readonly apiVersion: "v0alpha0";
                          readonly command?: readonly (string)[];
                          readonly containerRegistry?: string;
                          /** @default true */
                          readonly enabled?: boolean;
                          readonly env?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly healthChecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly image: string;
                          readonly models?: readonly ({
                            readonly id: string;
                            readonly path?: string;
                          })[];
                          readonly name: string;
                          /** @default 80 */
                          readonly port?: number;
                          readonly region?: string;
                          readonly repositories?: {
                            readonly dataset: string;
                            readonly mountPath?: string;
                            readonly repositories: readonly ({
                              readonly name: string;
                              readonly password?: string;
                              readonly ref?: string;
                              readonly url: string;
                              readonly username?: string;
                            })[];
                          };
                          readonly resources: {
                            readonly autoscaling?: {
                              readonly enabled?: boolean;
                              readonly maxReplicas: number;
                              readonly metrics: readonly (
                                | {
                                  /** @enum {string} */
                                  readonly metric: "requestDuration";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                }
                                | ({
                                  /** @enum {string} */
                                  readonly metric: "cpu" | "memory";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                })
                              )[];
                            };
                            readonly instanceType: string;
                            /** @default 1 */
                            readonly replicas?: number;
                          };
                        })
                        | ({
                          /** @enum {string} */
                          readonly apiVersion: "v0alpha1";
                          readonly command?: readonly (string)[];
                          readonly containerRegistry?: string;
                          /** @default true */
                          readonly enabled?: boolean;
                          readonly env?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly healthchecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly healthChecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly image: string;
                          readonly integrations?: readonly ({
                            readonly id: string;
                            readonly name: string;
                            /** @default /opt/models */
                            readonly path?: string;
                            /** @enum {string} */
                            readonly type: "model";
                          } | {
                            readonly accessKeyId: string;
                            readonly endpoint?: string;
                            readonly name: string;
                            readonly path?: string;
                            readonly region?: string;
                            readonly secretAccessKey: string;
                            /** @enum {string} */
                            readonly type: "s3";
                            readonly url: string;
                          } | {
                            readonly name: string;
                            /** @enum {string} */
                            readonly type: "volume";
                          } | {
                            readonly name: string;
                            readonly path?: string;
                            /** @enum {string} */
                            readonly type: "git-lfs";
                            /** Format: uri */
                            readonly url: string;
                          })[];
                          readonly name: string;
                          readonly region?: string;
                          readonly resources: {
                            readonly autoscaling?: {
                              readonly enabled?: boolean;
                              readonly maxReplicas: number;
                              readonly metrics: readonly (
                                | {
                                  /** @enum {string} */
                                  readonly metric: "requestDuration";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                }
                                | ({
                                  /** @enum {string} */
                                  readonly metric: "cpu" | "memory";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                })
                              )[];
                            };
                            readonly machineType: string;
                            readonly ports: readonly (number)[];
                            /** @default 1 */
                            readonly replicas?: number;
                          };
                        })
                      )
                      | ({
                        readonly apiVersion: "v1" | "latest";
                        readonly command?: readonly (string)[];
                        readonly containerRegistry?: string;
                        /** @default true */
                        readonly enabled?: boolean;
                        readonly env?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly healthchecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly healthChecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly image: string;
                        readonly integrations?: readonly ({
                          readonly id: string;
                          readonly name: string;
                          /** @default /opt/models */
                          readonly path?: string;
                          /** @enum {string} */
                          readonly type: "model";
                        } | {
                          readonly accessKeyId: string;
                          readonly endpoint?: string;
                          readonly name: string;
                          readonly path?: string;
                          readonly region?: string;
                          readonly secretAccessKey: string;
                          /** @enum {string} */
                          readonly type: "s3";
                          readonly url: string;
                        } | {
                          readonly name: string;
                          /** @enum {string} */
                          readonly type: "volume";
                        } | {
                          readonly name: string;
                          readonly path?: string;
                          /** @enum {string} */
                          readonly type: "git-lfs";
                          /** Format: uri */
                          readonly url: string;
                        })[];
                        readonly name: string;
                        readonly region?: string;
                        readonly resources: {
                          readonly autoscaling?: {
                            readonly enabled?: boolean;
                            readonly maxReplicas: number;
                            readonly metrics: readonly (
                              | {
                                /** @enum {string} */
                                readonly metric: "requestDuration";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              }
                              | ({
                                /** @enum {string} */
                                readonly metric: "cpu" | "memory";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              })
                            )[];
                          };
                          readonly machineType: string;
                          readonly ports: readonly (number)[];
                          /** @default 1 */
                          readonly replicas?: number;
                        };
                      })
                    )
                    | null;
                  /** @description The ID of the deployment the spec belongs to */
                  readonly deploymentId: string;
                  /**
                   * Format: date-time
                   * @description The date the deployment was marked "healthy"
                   * @default null
                   */
                  readonly dtHealthy?: Date;
                  /**
                   * @description The fatal configuration error. Only present if the cluster was unable to apply the entire deployment configuration. This is not the same as an instance error.
                   * @default null
                   */
                  readonly error?: string | null;
                  /**
                   * Format: date-time
                   * @description The date the deployment configuration was applied to the cluster
                   * @default null
                   */
                  readonly externalApplied?: Date;
                  /** @description The ID of the deployment spec */
                  readonly id: string;
                  /**
                   * @description Metadata about the source of the configuration
                   * @default null
                   */
                  readonly metadata?:
                    | ({
                      readonly gitHeaders?: {
                        readonly "x-git-actor": string;
                        readonly "x-git-host": "github" | "gitlab";
                        readonly "x-git-owner": string;
                        readonly "x-git-ref": string;
                        readonly "x-git-repo": string;
                        readonly "x-git-sha": string;
                      };
                    })
                    | null;
                  /** @description The ID of the user the deployment belongs to */
                  readonly userId: string;
                })
                | null;
              /**
               * @description The last version hash for the deployment
               * @default null
               */
              readonly latestSpecHash?: string | null;
              /** @description The name of the deployment */
              readonly name: string;
              /** @description The ID of the project the deployment belongs to */
              readonly projectId: string;
              /** @description The ID of the team the deployment belongs to */
              readonly teamId: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Upsert a deployment
   * @description Submit a new deployment configuration. If a deployment does not exist, one is created. Otherwise, a deployment is updated with new configuration.
   */
  "deployments-upsert": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The deployment configuration */
          readonly config:
            | (
              | ({
                /** @enum {string} */
                readonly apiVersion: "v0alpha0";
                readonly command?: readonly (string)[];
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled?: boolean;
                readonly env?: readonly ({
                  readonly name: string;
                  readonly value: string;
                })[];
                readonly healthChecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly models?: readonly ({
                  readonly id: string;
                  readonly path?: string;
                })[];
                readonly name: string;
                /** @default 80 */
                readonly port?: number;
                readonly region?: string;
                readonly repositories?: {
                  readonly dataset: string;
                  readonly mountPath?: string;
                  readonly repositories: readonly ({
                    readonly name: string;
                    readonly password?: string;
                    readonly ref?: string;
                    readonly url: string;
                    readonly username?: string;
                  })[];
                };
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly (
                      | {
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }
                      | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      })
                    )[];
                  };
                  readonly instanceType: string;
                  /** @default 1 */
                  readonly replicas?: number;
                };
              })
              | ({
                /** @enum {string} */
                readonly apiVersion: "v0alpha1";
                readonly command?: readonly (string)[];
                readonly containerRegistry?: string;
                /** @default true */
                readonly enabled?: boolean;
                readonly env?: readonly ({
                  readonly name: string;
                  readonly value: string;
                })[];
                readonly healthchecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly healthChecks?: {
                  readonly liveness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly readiness?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                  readonly startup?: {
                    readonly failureThreshold?: number;
                    readonly headers?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly host?: string;
                    readonly initialDelaySeconds?: number;
                    readonly path: string;
                    readonly periodSeconds?: number;
                    readonly port?: number;
                    readonly timeoutSeconds?: number;
                  } | {
                    readonly exec: {
                      readonly command: readonly (string)[];
                    };
                    readonly failureThreshold?: number;
                    readonly initialDelaySeconds?: number;
                    readonly periodSeconds?: number;
                    readonly timeoutSeconds?: number;
                  };
                };
                readonly image: string;
                readonly integrations?: readonly ({
                  readonly id: string;
                  readonly name: string;
                  /** @default /opt/models */
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "model";
                } | {
                  readonly accessKeyId: string;
                  readonly endpoint?: string;
                  readonly name: string;
                  readonly path?: string;
                  readonly region?: string;
                  readonly secretAccessKey: string;
                  /** @enum {string} */
                  readonly type: "s3";
                  readonly url: string;
                } | {
                  readonly name: string;
                  /** @enum {string} */
                  readonly type: "volume";
                } | {
                  readonly name: string;
                  readonly path?: string;
                  /** @enum {string} */
                  readonly type: "git-lfs";
                  /** Format: uri */
                  readonly url: string;
                })[];
                readonly name: string;
                readonly region?: string;
                readonly resources: {
                  readonly autoscaling?: {
                    readonly enabled?: boolean;
                    readonly maxReplicas: number;
                    readonly metrics: readonly (
                      | {
                        /** @enum {string} */
                        readonly metric: "requestDuration";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      }
                      | ({
                        /** @enum {string} */
                        readonly metric: "cpu" | "memory";
                        /** @enum {string} */
                        readonly summary: "average";
                        readonly value: number;
                      })
                    )[];
                  };
                  readonly machineType: string;
                  readonly ports: readonly (number)[];
                  /** @default 1 */
                  readonly replicas?: number;
                };
              })
            )
            | ({
              readonly apiVersion: "v1" | "latest";
              readonly command?: readonly (string)[];
              readonly containerRegistry?: string;
              /** @default true */
              readonly enabled?: boolean;
              readonly env?: readonly ({
                readonly name: string;
                readonly value: string;
              })[];
              readonly healthchecks?: {
                readonly liveness?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
                readonly readiness?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
                readonly startup?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
              };
              readonly healthChecks?: {
                readonly liveness?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
                readonly readiness?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
                readonly startup?: {
                  readonly failureThreshold?: number;
                  readonly headers?: readonly ({
                    readonly name: string;
                    readonly value: string;
                  })[];
                  readonly host?: string;
                  readonly initialDelaySeconds?: number;
                  readonly path: string;
                  readonly periodSeconds?: number;
                  readonly port?: number;
                  readonly timeoutSeconds?: number;
                } | {
                  readonly exec: {
                    readonly command: readonly (string)[];
                  };
                  readonly failureThreshold?: number;
                  readonly initialDelaySeconds?: number;
                  readonly periodSeconds?: number;
                  readonly timeoutSeconds?: number;
                };
              };
              readonly image: string;
              readonly integrations?: readonly ({
                readonly id: string;
                readonly name: string;
                /** @default /opt/models */
                readonly path?: string;
                /** @enum {string} */
                readonly type: "model";
              } | {
                readonly accessKeyId: string;
                readonly endpoint?: string;
                readonly name: string;
                readonly path?: string;
                readonly region?: string;
                readonly secretAccessKey: string;
                /** @enum {string} */
                readonly type: "s3";
                readonly url: string;
              } | {
                readonly name: string;
                /** @enum {string} */
                readonly type: "volume";
              } | {
                readonly name: string;
                readonly path?: string;
                /** @enum {string} */
                readonly type: "git-lfs";
                /** Format: uri */
                readonly url: string;
              })[];
              readonly name: string;
              readonly region?: string;
              readonly resources: {
                readonly autoscaling?: {
                  readonly enabled?: boolean;
                  readonly maxReplicas: number;
                  readonly metrics: readonly (
                    | {
                      /** @enum {string} */
                      readonly metric: "requestDuration";
                      /** @enum {string} */
                      readonly summary: "average";
                      readonly value: number;
                    }
                    | ({
                      /** @enum {string} */
                      readonly metric: "cpu" | "memory";
                      /** @enum {string} */
                      readonly summary: "average";
                      readonly value: number;
                    })
                  )[];
                };
                readonly machineType: string;
                readonly ports: readonly (number)[];
                /** @default 1 */
                readonly replicas?: number;
              };
            });
          /**
           * @description The ID of the deployment to update.
           * @default null
           */
          readonly deploymentId?: string | null;
          /** @description The project ID to deploy resources under. */
          readonly projectId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the deployment */
            readonly deploymentId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a deployment
   * @description Fetches a single deployment by deployment ID.
   */
  "deployments-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the deployment to fetch */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the deployment was created
             */
            readonly dtCreated: Date;
            /** @description The unique endpoint for the deployment */
            readonly endpoint: string;
            /** @description The ID of the deployment */
            readonly id: string;
            /**
             * @description The latest deployment configuration. If invalid, null is returned.
             * @default null
             */
            readonly latestSpec?:
              | ({
                /** @description The data for the deployment spec */
                readonly data?:
                  | (
                    | (
                      | ({
                        /** @enum {string} */
                        readonly apiVersion: "v0alpha0";
                        readonly command?: readonly (string)[];
                        readonly containerRegistry?: string;
                        /** @default true */
                        readonly enabled?: boolean;
                        readonly env?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly healthChecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly image: string;
                        readonly models?: readonly ({
                          readonly id: string;
                          readonly path?: string;
                        })[];
                        readonly name: string;
                        /** @default 80 */
                        readonly port?: number;
                        readonly region?: string;
                        readonly repositories?: {
                          readonly dataset: string;
                          readonly mountPath?: string;
                          readonly repositories: readonly ({
                            readonly name: string;
                            readonly password?: string;
                            readonly ref?: string;
                            readonly url: string;
                            readonly username?: string;
                          })[];
                        };
                        readonly resources: {
                          readonly autoscaling?: {
                            readonly enabled?: boolean;
                            readonly maxReplicas: number;
                            readonly metrics: readonly (
                              | {
                                /** @enum {string} */
                                readonly metric: "requestDuration";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              }
                              | ({
                                /** @enum {string} */
                                readonly metric: "cpu" | "memory";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              })
                            )[];
                          };
                          readonly instanceType: string;
                          /** @default 1 */
                          readonly replicas?: number;
                        };
                      })
                      | ({
                        /** @enum {string} */
                        readonly apiVersion: "v0alpha1";
                        readonly command?: readonly (string)[];
                        readonly containerRegistry?: string;
                        /** @default true */
                        readonly enabled?: boolean;
                        readonly env?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly healthchecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly healthChecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly image: string;
                        readonly integrations?: readonly ({
                          readonly id: string;
                          readonly name: string;
                          /** @default /opt/models */
                          readonly path?: string;
                          /** @enum {string} */
                          readonly type: "model";
                        } | {
                          readonly accessKeyId: string;
                          readonly endpoint?: string;
                          readonly name: string;
                          readonly path?: string;
                          readonly region?: string;
                          readonly secretAccessKey: string;
                          /** @enum {string} */
                          readonly type: "s3";
                          readonly url: string;
                        } | {
                          readonly name: string;
                          /** @enum {string} */
                          readonly type: "volume";
                        } | {
                          readonly name: string;
                          readonly path?: string;
                          /** @enum {string} */
                          readonly type: "git-lfs";
                          /** Format: uri */
                          readonly url: string;
                        })[];
                        readonly name: string;
                        readonly region?: string;
                        readonly resources: {
                          readonly autoscaling?: {
                            readonly enabled?: boolean;
                            readonly maxReplicas: number;
                            readonly metrics: readonly (
                              | {
                                /** @enum {string} */
                                readonly metric: "requestDuration";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              }
                              | ({
                                /** @enum {string} */
                                readonly metric: "cpu" | "memory";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              })
                            )[];
                          };
                          readonly machineType: string;
                          readonly ports: readonly (number)[];
                          /** @default 1 */
                          readonly replicas?: number;
                        };
                      })
                    )
                    | ({
                      readonly apiVersion: "v1" | "latest";
                      readonly command?: readonly (string)[];
                      readonly containerRegistry?: string;
                      /** @default true */
                      readonly enabled?: boolean;
                      readonly env?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly healthchecks?: {
                        readonly liveness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly readiness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly startup?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                      };
                      readonly healthChecks?: {
                        readonly liveness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly readiness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly startup?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                      };
                      readonly image: string;
                      readonly integrations?: readonly ({
                        readonly id: string;
                        readonly name: string;
                        /** @default /opt/models */
                        readonly path?: string;
                        /** @enum {string} */
                        readonly type: "model";
                      } | {
                        readonly accessKeyId: string;
                        readonly endpoint?: string;
                        readonly name: string;
                        readonly path?: string;
                        readonly region?: string;
                        readonly secretAccessKey: string;
                        /** @enum {string} */
                        readonly type: "s3";
                        readonly url: string;
                      } | {
                        readonly name: string;
                        /** @enum {string} */
                        readonly type: "volume";
                      } | {
                        readonly name: string;
                        readonly path?: string;
                        /** @enum {string} */
                        readonly type: "git-lfs";
                        /** Format: uri */
                        readonly url: string;
                      })[];
                      readonly name: string;
                      readonly region?: string;
                      readonly resources: {
                        readonly autoscaling?: {
                          readonly enabled?: boolean;
                          readonly maxReplicas: number;
                          readonly metrics: readonly (
                            | {
                              /** @enum {string} */
                              readonly metric: "requestDuration";
                              /** @enum {string} */
                              readonly summary: "average";
                              readonly value: number;
                            }
                            | ({
                              /** @enum {string} */
                              readonly metric: "cpu" | "memory";
                              /** @enum {string} */
                              readonly summary: "average";
                              readonly value: number;
                            })
                          )[];
                        };
                        readonly machineType: string;
                        readonly ports: readonly (number)[];
                        /** @default 1 */
                        readonly replicas?: number;
                      };
                    })
                  )
                  | null;
                /** @description The ID of the deployment the spec belongs to */
                readonly deploymentId: string;
                /**
                 * Format: date-time
                 * @description The date the deployment was marked "healthy"
                 * @default null
                 */
                readonly dtHealthy?: Date;
                /**
                 * @description The fatal configuration error. Only present if the cluster was unable to apply the entire deployment configuration. This is not the same as an instance error.
                 * @default null
                 */
                readonly error?: string | null;
                /**
                 * Format: date-time
                 * @description The date the deployment configuration was applied to the cluster
                 * @default null
                 */
                readonly externalApplied?: Date;
                /** @description The ID of the deployment spec */
                readonly id: string;
                /**
                 * @description Metadata about the source of the configuration
                 * @default null
                 */
                readonly metadata?:
                  | ({
                    readonly gitHeaders?: {
                      readonly "x-git-actor": string;
                      readonly "x-git-host": "github" | "gitlab";
                      readonly "x-git-owner": string;
                      readonly "x-git-ref": string;
                      readonly "x-git-repo": string;
                      readonly "x-git-sha": string;
                    };
                  })
                  | null;
                /** @description The ID of the user the deployment belongs to */
                readonly userId: string;
              })
              | null;
            /**
             * @description The last version hash for the deployment
             * @default null
             */
            readonly latestSpecHash?: string | null;
            /** @description The name of the deployment */
            readonly name: string;
            /** @description The ID of the project the deployment belongs to */
            readonly projectId: string;
            /** @description The ID of the team the deployment belongs to */
            readonly teamId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a deployment
   * @description Deletes a deployment by deployment ID.
   */
  "deployments-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the deployment to delete */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the deleted deployment */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List app history
   * @description Lists history for a given app.
   */
  "deploymentHistory-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
      readonly path: {
        /** @description The ID of the app */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The data for the deployment spec */
              readonly data?:
                | (
                  | (
                    | ({
                      /** @enum {string} */
                      readonly apiVersion: "v0alpha0";
                      readonly command?: readonly (string)[];
                      readonly containerRegistry?: string;
                      /** @default true */
                      readonly enabled?: boolean;
                      readonly env?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly healthChecks?: {
                        readonly liveness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly readiness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly startup?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                      };
                      readonly image: string;
                      readonly models?: readonly ({
                        readonly id: string;
                        readonly path?: string;
                      })[];
                      readonly name: string;
                      /** @default 80 */
                      readonly port?: number;
                      readonly region?: string;
                      readonly repositories?: {
                        readonly dataset: string;
                        readonly mountPath?: string;
                        readonly repositories: readonly ({
                          readonly name: string;
                          readonly password?: string;
                          readonly ref?: string;
                          readonly url: string;
                          readonly username?: string;
                        })[];
                      };
                      readonly resources: {
                        readonly autoscaling?: {
                          readonly enabled?: boolean;
                          readonly maxReplicas: number;
                          readonly metrics: readonly (
                            | {
                              /** @enum {string} */
                              readonly metric: "requestDuration";
                              /** @enum {string} */
                              readonly summary: "average";
                              readonly value: number;
                            }
                            | ({
                              /** @enum {string} */
                              readonly metric: "cpu" | "memory";
                              /** @enum {string} */
                              readonly summary: "average";
                              readonly value: number;
                            })
                          )[];
                        };
                        readonly instanceType: string;
                        /** @default 1 */
                        readonly replicas?: number;
                      };
                    })
                    | ({
                      /** @enum {string} */
                      readonly apiVersion: "v0alpha1";
                      readonly command?: readonly (string)[];
                      readonly containerRegistry?: string;
                      /** @default true */
                      readonly enabled?: boolean;
                      readonly env?: readonly ({
                        readonly name: string;
                        readonly value: string;
                      })[];
                      readonly healthchecks?: {
                        readonly liveness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly readiness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly startup?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                      };
                      readonly healthChecks?: {
                        readonly liveness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly readiness?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                        readonly startup?: {
                          readonly failureThreshold?: number;
                          readonly headers?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly host?: string;
                          readonly initialDelaySeconds?: number;
                          readonly path: string;
                          readonly periodSeconds?: number;
                          readonly port?: number;
                          readonly timeoutSeconds?: number;
                        } | {
                          readonly exec: {
                            readonly command: readonly (string)[];
                          };
                          readonly failureThreshold?: number;
                          readonly initialDelaySeconds?: number;
                          readonly periodSeconds?: number;
                          readonly timeoutSeconds?: number;
                        };
                      };
                      readonly image: string;
                      readonly integrations?: readonly ({
                        readonly id: string;
                        readonly name: string;
                        /** @default /opt/models */
                        readonly path?: string;
                        /** @enum {string} */
                        readonly type: "model";
                      } | {
                        readonly accessKeyId: string;
                        readonly endpoint?: string;
                        readonly name: string;
                        readonly path?: string;
                        readonly region?: string;
                        readonly secretAccessKey: string;
                        /** @enum {string} */
                        readonly type: "s3";
                        readonly url: string;
                      } | {
                        readonly name: string;
                        /** @enum {string} */
                        readonly type: "volume";
                      } | {
                        readonly name: string;
                        readonly path?: string;
                        /** @enum {string} */
                        readonly type: "git-lfs";
                        /** Format: uri */
                        readonly url: string;
                      })[];
                      readonly name: string;
                      readonly region?: string;
                      readonly resources: {
                        readonly autoscaling?: {
                          readonly enabled?: boolean;
                          readonly maxReplicas: number;
                          readonly metrics: readonly (
                            | {
                              /** @enum {string} */
                              readonly metric: "requestDuration";
                              /** @enum {string} */
                              readonly summary: "average";
                              readonly value: number;
                            }
                            | ({
                              /** @enum {string} */
                              readonly metric: "cpu" | "memory";
                              /** @enum {string} */
                              readonly summary: "average";
                              readonly value: number;
                            })
                          )[];
                        };
                        readonly machineType: string;
                        readonly ports: readonly (number)[];
                        /** @default 1 */
                        readonly replicas?: number;
                      };
                    })
                  )
                  | ({
                    readonly apiVersion: "v1" | "latest";
                    readonly command?: readonly (string)[];
                    readonly containerRegistry?: string;
                    /** @default true */
                    readonly enabled?: boolean;
                    readonly env?: readonly ({
                      readonly name: string;
                      readonly value: string;
                    })[];
                    readonly healthchecks?: {
                      readonly liveness?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                      readonly readiness?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                      readonly startup?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                    };
                    readonly healthChecks?: {
                      readonly liveness?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                      readonly readiness?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                      readonly startup?: {
                        readonly failureThreshold?: number;
                        readonly headers?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly host?: string;
                        readonly initialDelaySeconds?: number;
                        readonly path: string;
                        readonly periodSeconds?: number;
                        readonly port?: number;
                        readonly timeoutSeconds?: number;
                      } | {
                        readonly exec: {
                          readonly command: readonly (string)[];
                        };
                        readonly failureThreshold?: number;
                        readonly initialDelaySeconds?: number;
                        readonly periodSeconds?: number;
                        readonly timeoutSeconds?: number;
                      };
                    };
                    readonly image: string;
                    readonly integrations?: readonly ({
                      readonly id: string;
                      readonly name: string;
                      /** @default /opt/models */
                      readonly path?: string;
                      /** @enum {string} */
                      readonly type: "model";
                    } | {
                      readonly accessKeyId: string;
                      readonly endpoint?: string;
                      readonly name: string;
                      readonly path?: string;
                      readonly region?: string;
                      readonly secretAccessKey: string;
                      /** @enum {string} */
                      readonly type: "s3";
                      readonly url: string;
                    } | {
                      readonly name: string;
                      /** @enum {string} */
                      readonly type: "volume";
                    } | {
                      readonly name: string;
                      readonly path?: string;
                      /** @enum {string} */
                      readonly type: "git-lfs";
                      /** Format: uri */
                      readonly url: string;
                    })[];
                    readonly name: string;
                    readonly region?: string;
                    readonly resources: {
                      readonly autoscaling?: {
                        readonly enabled?: boolean;
                        readonly maxReplicas: number;
                        readonly metrics: readonly (
                          | {
                            /** @enum {string} */
                            readonly metric: "requestDuration";
                            /** @enum {string} */
                            readonly summary: "average";
                            readonly value: number;
                          }
                          | ({
                            /** @enum {string} */
                            readonly metric: "cpu" | "memory";
                            /** @enum {string} */
                            readonly summary: "average";
                            readonly value: number;
                          })
                        )[];
                      };
                      readonly machineType: string;
                      readonly ports: readonly (number)[];
                      /** @default 1 */
                      readonly replicas?: number;
                    };
                  })
                )
                | null;
              /** @description The ID of the deployment the spec belongs to */
              readonly deploymentId: string;
              /**
               * Format: date-time
               * @description The date the deployment was marked "healthy"
               * @default null
               */
              readonly dtHealthy?: Date;
              /**
               * @description The fatal configuration error. Only present if the cluster was unable to apply the entire deployment configuration. This is not the same as an instance error.
               * @default null
               */
              readonly error?: string | null;
              /**
               * Format: date-time
               * @description The date the deployment configuration was applied to the cluster
               * @default null
               */
              readonly externalApplied?: Date;
              /** @description The ID of the deployment spec */
              readonly id: string;
              /**
               * @description Metadata about the source of the configuration
               * @default null
               */
              readonly metadata?:
                | ({
                  readonly gitHeaders?: {
                    readonly "x-git-actor": string;
                    readonly "x-git-host": "github" | "gitlab";
                    readonly "x-git-owner": string;
                    readonly "x-git-ref": string;
                    readonly "x-git-repo": string;
                    readonly "x-git-sha": string;
                  };
                })
                | null;
              /** @description The ID of the user the deployment belongs to */
              readonly userId: string;
              /** @default null */
              readonly workflowRun?:
                | ({
                  /**
                   * Format: date-time
                   * @description When the workflow run was created
                   * @default null
                   */
                  readonly dtCreated?: Date;
                  /**
                   * Format: date-time
                   * @description When the workflow run finished
                   * @default null
                   */
                  readonly dtFinished?: Date;
                  /**
                   * Format: date-time
                   * @description When the workflow run started
                   * @default null
                   */
                  readonly dtStarted?: Date;
                  /**
                   * Format: uuid
                   * @description The ID of the workflow run
                   */
                  readonly id: string;
                  /**
                   * @description The message of the workflow run
                   * @default null
                   */
                  readonly message?: string | null;
                  /**
                   * @description The phase of the workflow run
                   * @enum {string}
                   */
                  readonly phase:
                    | "Initializing"
                    | "Submitting"
                    | "Pending"
                    | "Running"
                    | "Succeeded"
                    | "Skipped"
                    | "Failed"
                    | "Error"
                    | "Omitted"
                    | "Canceled";
                  readonly workflow: {
                    /**
                     * Format: date-time
                     * @description When the workflow was created
                     * @default null
                     */
                    readonly dtCreated?: Date;
                    /**
                     * Format: uuid
                     * @description The ID of the workflow
                     */
                    readonly id: string;
                    /** @description The name of the workflow */
                    readonly name: string;
                  };
                  /**
                   * Format: uuid
                   * @description The ID of the workflow
                   */
                  readonly workflowId: string;
                })
                | null;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List app logs
   * @description Lists logs for a given app.
   */
  "deploymentLogs-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description Get the logs for a particular instance ID */
        instanceId?: string;
      };
      readonly path: {
        /** @description The ID of the app */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the log was created.
               */
              readonly dtCreated: Date;
              /** @description ID of the log item */
              readonly id: string;
              /**
               * @description The instance ID the log is associated with.
               * @default null
               */
              readonly instanceId?: string | null;
              /** @description The associated job ID of the log item. */
              readonly jobId: string;
              /** @description The line number of the log item. */
              readonly line: string;
              /** @description The message of the log item. */
              readonly message: string;
              /**
               * @description UUID representing the log item
               * @default null
               */
              readonly uuid?: string | null;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List app metrics
   * @description Lists metrics for a given app.
   */
  "deploymentMetrics-get": {
    parameters: {
      readonly query: {
        /** @description The metric to fetch. */
        metric:
          | (
            | (
              | ((("requests_total" | "cpu") | "memory") | "gpu")
              | "requests_per_second"
            )
            | "requests_duration_seconds_1m"
          )
          | "requests_duration_seconds_5m";
        /** @description The time frame for the metrics request. */
        timeframe?: ((("hour" | "12_hours") | "day") | "1_week") | "2_weeks";
      };
      readonly path: {
        /** @description The ID of the deployment to fetch */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json":
            | (
              | {
                /** Format: date-time */
                readonly timestamp: Date;
                readonly value: string;
              }
              | readonly ({
                readonly gpu?: string;
                readonly instanceId?: string;
                /** Format: date-time */
                readonly timestamp: Date;
                readonly value: string;
              })[]
            )
            | readonly ({
              readonly instanceId: string;
              readonly values: readonly ({
                /** Format: date-time */
                readonly timestamp: Date;
                readonly value: string;
              })[];
            })[];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List deployment runs
   * @description Lists the active deployment runs for a deployment.
   */
  "deploymentRuns-get": {
    parameters: {
      readonly query: {
        /** @description The latest n number of deployment runs to return */
        limit?: number;
      };
      readonly path: {
        /** @description The ID of the deployment to fetch */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": readonly ({
            /**
             * @description The amount of replicas that are available but not ready
             * @default 0
             */
            readonly availableReplicas?: number | null;
            readonly id: string;
            /** @description The deployment run instances */
            readonly instances: readonly ({
              /**
               * Format: date-time
               * @description The date the instance was created
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the instance was finished
               * @default null
               */
              readonly dtFinished?: Date;
              /** @description The time series state history of the deployment instance */
              readonly history: readonly ({
                /**
                 * @description The state message from the instance at the point in time
                 * @default null
                 */
                readonly message?: string | null;
                /** @description The state of the instance at the point in time */
                readonly state: string;
                /**
                 * Format: date-time
                 * @description The timestamp of the state
                 */
                readonly timestamp: Date;
              })[];
              /** @description The ID of the deployment instance */
              readonly id: string;
              /** @description The ID of the deployment instance */
              readonly instanceId: string;
              /** @description The current state of the instance */
              readonly state: string;
              /**
               * @description The latest state message for the instance
               * @default null
               */
              readonly stateMessage?: string | null;
            })[];
            /**
             * @description The amount of replicas that are ready
             * @default 0
             */
            readonly readyReplicas?: number | null;
            /**
             * @description The desired amount of replicas for the deployment run
             * @default 0
             */
            readonly replicas?: number | null;
          })[];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Health check
   * @description Check if the API is healthy.
   */
  health: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": "HEALTHY";
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List machine events
   * @description Fetches a list of machine events.
   */
  "machineEvents-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        machineId?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a machine event
   * @description Fetches a single machine event by ID.
   */
  "machineEvents-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine event to fetch. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the event was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the event was finished.
             */
            readonly dtFinished: Date;
            /**
             * Format: date-time
             * @description The date the event was started.
             */
            readonly dtStarted: Date;
            /** @description The error message of the event, if any. */
            readonly error: string | null;
            /** @description The ID of the event. */
            readonly id: string;
            /** @description The ID of the machine the event is for. */
            readonly machineId: string | null;
            /**
             * @description The name of the event, e.g. "create".
             * @enum {string}
             */
            readonly name:
              | "bill-sessions"
              | "bill-upgrade"
              | "create"
              | "deactivate"
              | "restart"
              | "snapshot-create"
              | "snapshot-delete"
              | "snapshot-restore"
              | "start"
              | "stop"
              | "template-create"
              | "template-delete"
              | "template-distribute"
              | "template-import"
              | "vm-migrate"
              | "vm-shutdown-force"
              | "vm-upgrade";
            /**
             * @description The state of the event, e.g. "done".
             * @enum {string}
             */
            readonly state:
              | "new"
              | "in progress"
              | "done"
              | "error"
              | "cancelled";
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List machines
   * @description Fetches a list of machines.
   */
  "machines-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name" | "state";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        name?: string;
        region?: string;
        agentType?: string;
        machineType?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The accelerators of the machine. */
              readonly accelerators?:
                | (readonly ({
                  /** @description The number of accelerators of this type. */
                  readonly count: number;
                  /** @description The amount of memory the accelerator has, if applicable. */
                  readonly memory: number | null;
                  /** @description The name of the accelerator. */
                  readonly name: string;
                })[])
                | null;
              /** @description The agent type of the machine. */
              readonly agentType: string;
              /** @description Whether auto shutdown is enabled. */
              readonly autoShutdownEnabled: boolean;
              /** @description Whether to force shutdown the machine. */
              readonly autoShutdownForce: boolean | null;
              /** @description The shutdown timeout of the machine in hours. */
              readonly autoShutdownTimeout: number | null;
              /** @description Whether auto snapshots are enabled. */
              readonly autoSnapshotEnabled: boolean;
              /**
               * @description The frequency of auto snapshots.
               * @enum {string|null}
               */
              readonly autoSnapshotFrequency:
                | "hourly"
                | "daily"
                | "weekly"
                | "monthly"
                | null;
              /** @description The number of auto snapshots to save. */
              readonly autoSnapshotSaveCount: number | null;
              /** @description The number of CPUs. */
              readonly cpus: number;
              /**
               * Format: date-time
               * @description The date the machine was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the machine was deleted.
               */
              readonly dtDeleted: Date;
              /**
               * Format: date-time
               * @description The date the machine was last modified.
               */
              readonly dtModified: Date;
              /** @description The ID of the machine. */
              readonly id: string;
              /** @description The type of the machine. */
              readonly machineType: string;
              /** @description The name of the machine. */
              readonly name: string;
              /** @description The ID of the network the machine is on. */
              readonly networkId: string | null;
              /** @description The operating system of the machine. */
              readonly os: string;
              /** @description The private IP address of the machine. */
              readonly privateIp: string | null;
              /** @description The public IP address of the machine. */
              readonly publicIp: string | null;
              /**
               * @description The public IP type.
               * @enum {string}
               */
              readonly publicIpType: "static" | "dynamic" | "none";
              /**
               * Format: int64
               * @description The amount of RAM in bytes.
               */
              readonly ram: number;
              /** @description The region of the machine. */
              readonly region: string;
              /** @description Whether a restore point is enabled. */
              readonly restorePointEnabled: boolean;
              /**
               * @description The frequency of restore points.
               * @enum {string|null}
               */
              readonly restorePointFrequency: "shutdown" | null;
              /** @description The ID of the snapshot to use as a restore point. */
              readonly restorePointSnapshotId: string | null;
              /**
               * @description The state of the machine.
               * @enum {string}
               */
              readonly state:
                | "off"
                | "starting"
                | "stopping"
                | "restarting"
                | "serviceready"
                | "ready"
                | "upgrading"
                | "provisioning";
              /** @description The storage rate of the machine. */
              readonly storageRate: number;
              /**
               * Format: int64
               * @description The total amount of storage.
               */
              readonly storageTotal: number;
              /**
               * Format: int64
               * @description The amount of storage used.
               */
              readonly storageUsed: number;
              /** @description Whether updates are pending. */
              readonly updatesPending: boolean;
              /** @description The usage rate of the machine. */
              readonly usageRate: number;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a machine
   * @description Creates a new machine.
   */
  "machines-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The IDs of users to grant access to the machine. */
          readonly accessorIds?: readonly (string)[];
          /** @description Whether to enable auto shutdown. */
          readonly autoShutdownEnabled?: boolean;
          /** @description Whether to force shutdown the machine. */
          readonly autoShutdownForce?: boolean;
          /** @description The auto shutdown timeout in hours. */
          readonly autoShutdownTimeout?: number;
          /** @description Whether to enable auto snapshots. */
          readonly autoSnapshotEnabled?: boolean;
          /**
           * @description The auto snapshot frequency.
           * @enum {string}
           */
          readonly autoSnapshotFrequency?:
            | "hourly"
            | "daily"
            | "weekly"
            | "monthly";
          /** @description The number of auto snapshots to save. */
          readonly autoSnapshotSaveCount?: number;
          /** @description The disk size in gigabytes. */
          readonly diskSize: number;
          /** @description Whether to email the password. */
          readonly emailPassword?: boolean;
          /** @description Whether to enable NVLink. */
          readonly enableNvlink?: boolean;
          /** @description The machine type. */
          readonly machineType: string;
          /** @description The name of the new machine. */
          readonly name: string;
          /** @description The network ID. */
          readonly networkId?: string;
          /**
           * @description The public IP type.
           * @enum {string}
           */
          readonly publicIpType?: "static" | "dynamic" | "none";
          /** @description The region to create the machine in. */
          readonly region: string;
          /** @description Whether to use initial snapshot as a restore point. */
          readonly restorePointEnabled?: boolean;
          /**
           * @description The restore point frequency.
           * @enum {string}
           */
          readonly restorePointFrequency?: "shutdown";
          /** @description Whether to start the machine on creation. */
          readonly startOnCreate?: boolean;
          /** @description The startup script ID. */
          readonly startupScriptId?: string;
          /** @description Whether to take an initial snapshot. */
          readonly takeInitialSnapshot?: boolean;
          /** @description The template ID. */
          readonly templateId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The machine. */
            readonly data: {
              /** @description The accelerators of the machine. */
              readonly accelerators?:
                | (readonly ({
                  /** @description The number of accelerators of this type. */
                  readonly count: number;
                  /** @description The amount of memory the accelerator has, if applicable. */
                  readonly memory: number | null;
                  /** @description The name of the accelerator. */
                  readonly name: string;
                })[])
                | null;
              /** @description The agent type of the machine. */
              readonly agentType: string;
              /** @description Whether auto shutdown is enabled. */
              readonly autoShutdownEnabled: boolean;
              /** @description Whether to force shutdown the machine. */
              readonly autoShutdownForce: boolean | null;
              /** @description The shutdown timeout of the machine in hours. */
              readonly autoShutdownTimeout: number | null;
              /** @description Whether auto snapshots are enabled. */
              readonly autoSnapshotEnabled: boolean;
              /**
               * @description The frequency of auto snapshots.
               * @enum {string|null}
               */
              readonly autoSnapshotFrequency:
                | "hourly"
                | "daily"
                | "weekly"
                | "monthly"
                | null;
              /** @description The number of auto snapshots to save. */
              readonly autoSnapshotSaveCount: number | null;
              /** @description The number of CPUs. */
              readonly cpus: number;
              /**
               * Format: date-time
               * @description The date the machine was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the machine was deleted.
               */
              readonly dtDeleted: Date;
              /**
               * Format: date-time
               * @description The date the machine was last modified.
               */
              readonly dtModified: Date;
              /** @description The ID of the machine. */
              readonly id: string;
              /** @description The type of the machine. */
              readonly machineType: string;
              /** @description The name of the machine. */
              readonly name: string;
              /** @description The ID of the network the machine is on. */
              readonly networkId: string | null;
              /** @description The operating system of the machine. */
              readonly os: string;
              /** @description The private IP address of the machine. */
              readonly privateIp: string | null;
              /** @description The public IP address of the machine. */
              readonly publicIp: string | null;
              /**
               * @description The public IP type.
               * @enum {string}
               */
              readonly publicIpType: "static" | "dynamic" | "none";
              /**
               * Format: int64
               * @description The amount of RAM in bytes.
               */
              readonly ram: number;
              /** @description The region of the machine. */
              readonly region: string;
              /** @description Whether a restore point is enabled. */
              readonly restorePointEnabled: boolean;
              /**
               * @description The frequency of restore points.
               * @enum {string|null}
               */
              readonly restorePointFrequency: "shutdown" | null;
              /** @description The ID of the snapshot to use as a restore point. */
              readonly restorePointSnapshotId: string | null;
              /**
               * @description The state of the machine.
               * @enum {string}
               */
              readonly state:
                | "off"
                | "starting"
                | "stopping"
                | "restarting"
                | "serviceready"
                | "ready"
                | "upgrading"
                | "provisioning";
              /** @description The storage rate of the machine. */
              readonly storageRate: number;
              /**
               * Format: int64
               * @description The total amount of storage.
               */
              readonly storageTotal: number;
              /**
               * Format: int64
               * @description The amount of storage used.
               */
              readonly storageUsed: number;
              /** @description Whether updates are pending. */
              readonly updatesPending: boolean;
              /** @description The usage rate of the machine. */
              readonly usageRate: number;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a machine
   * @description Fetches a single machine by ID.
   */
  "machines-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to fetch. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The accelerators of the machine. */
            readonly accelerators?:
              | (readonly ({
                /** @description The number of accelerators of this type. */
                readonly count: number;
                /** @description The amount of memory the accelerator has, if applicable. */
                readonly memory: number | null;
                /** @description The name of the accelerator. */
                readonly name: string;
              })[])
              | null;
            /** @description The agent type of the machine. */
            readonly agentType: string;
            /** @description Whether auto shutdown is enabled. */
            readonly autoShutdownEnabled: boolean;
            /** @description Whether to force shutdown the machine. */
            readonly autoShutdownForce: boolean | null;
            /** @description The shutdown timeout of the machine in hours. */
            readonly autoShutdownTimeout: number | null;
            /** @description Whether auto snapshots are enabled. */
            readonly autoSnapshotEnabled: boolean;
            /**
             * @description The frequency of auto snapshots.
             * @enum {string|null}
             */
            readonly autoSnapshotFrequency:
              | "hourly"
              | "daily"
              | "weekly"
              | "monthly"
              | null;
            /** @description The number of auto snapshots to save. */
            readonly autoSnapshotSaveCount: number | null;
            /** @description The number of CPUs. */
            readonly cpus: number;
            /**
             * Format: date-time
             * @description The date the machine was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the machine was deleted.
             */
            readonly dtDeleted: Date;
            /**
             * Format: date-time
             * @description The date the machine was last modified.
             */
            readonly dtModified: Date;
            /** @description The ID of the machine. */
            readonly id: string;
            /** @description The type of the machine. */
            readonly machineType: string;
            /** @description The name of the machine. */
            readonly name: string;
            /** @description The ID of the network the machine is on. */
            readonly networkId: string | null;
            /** @description The operating system of the machine. */
            readonly os: string;
            /** @description The private IP address of the machine. */
            readonly privateIp: string | null;
            /** @description The public IP address of the machine. */
            readonly publicIp: string | null;
            /**
             * @description The public IP type.
             * @enum {string}
             */
            readonly publicIpType: "static" | "dynamic" | "none";
            /**
             * Format: int64
             * @description The amount of RAM in bytes.
             */
            readonly ram: number;
            /** @description The region of the machine. */
            readonly region: string;
            /** @description Whether a restore point is enabled. */
            readonly restorePointEnabled: boolean;
            /**
             * @description The frequency of restore points.
             * @enum {string|null}
             */
            readonly restorePointFrequency: "shutdown" | null;
            /** @description The ID of the snapshot to use as a restore point. */
            readonly restorePointSnapshotId: string | null;
            /**
             * @description The state of the machine.
             * @enum {string}
             */
            readonly state:
              | "off"
              | "starting"
              | "stopping"
              | "restarting"
              | "serviceready"
              | "ready"
              | "upgrading"
              | "provisioning";
            /** @description The storage rate of the machine. */
            readonly storageRate: number;
            /**
             * Format: int64
             * @description The total amount of storage.
             */
            readonly storageTotal: number;
            /**
             * Format: int64
             * @description The amount of storage used.
             */
            readonly storageUsed: number;
            /** @description Whether updates are pending. */
            readonly updatesPending: boolean;
            /** @description The usage rate of the machine. */
            readonly usageRate: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a machine
   * @description Updates a machine.
   */
  "machines-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to update. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description Whether to enable auto shutdown. */
          readonly autoShutdownEnabled?: boolean;
          /** @description Whether to force shutdown the machine. */
          readonly autoShutdownForce?: boolean;
          /** @description The auto shutdown timeout in hours. */
          readonly autoShutdownTimeout?: number;
          /** @description Whether to enable auto snapshots. */
          readonly autoSnapshotEnabled?: boolean;
          /**
           * @description The auto snapshot frequency.
           * @enum {string}
           */
          readonly autoSnapshotFrequency?:
            | "hourly"
            | "daily"
            | "weekly"
            | "monthly";
          /** @description The number of auto snapshots to save. */
          readonly autoSnapshotSaveCount?: number;
          /** @description The disk size in gigabytes. */
          readonly diskSize?: number;
          /** @description The machine type. */
          readonly machineType?: string;
          /** @description The name of the machine. */
          readonly name?: string;
          /** @description The network ID. */
          readonly networkId?: string;
          /**
           * @description The public IP type.
           * @enum {string}
           */
          readonly publicIpType?: "static" | "dynamic" | "none";
          /** @description Whether to use initial snapshot as a restore point. */
          readonly restorePointEnabled?: boolean;
          /**
           * @description The restore point frequency.
           * @enum {string}
           */
          readonly restorePointFrequency?: "shutdown";
          /** @description The restore point snapshot ID. */
          readonly restorePointSnapshotId?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The machine. */
            readonly data: {
              /** @description The accelerators of the machine. */
              readonly accelerators?:
                | (readonly ({
                  /** @description The number of accelerators of this type. */
                  readonly count: number;
                  /** @description The amount of memory the accelerator has, if applicable. */
                  readonly memory: number | null;
                  /** @description The name of the accelerator. */
                  readonly name: string;
                })[])
                | null;
              /** @description The agent type of the machine. */
              readonly agentType: string;
              /** @description Whether auto shutdown is enabled. */
              readonly autoShutdownEnabled: boolean;
              /** @description Whether to force shutdown the machine. */
              readonly autoShutdownForce: boolean | null;
              /** @description The shutdown timeout of the machine in hours. */
              readonly autoShutdownTimeout: number | null;
              /** @description Whether auto snapshots are enabled. */
              readonly autoSnapshotEnabled: boolean;
              /**
               * @description The frequency of auto snapshots.
               * @enum {string|null}
               */
              readonly autoSnapshotFrequency:
                | "hourly"
                | "daily"
                | "weekly"
                | "monthly"
                | null;
              /** @description The number of auto snapshots to save. */
              readonly autoSnapshotSaveCount: number | null;
              /** @description The number of CPUs. */
              readonly cpus: number;
              /**
               * Format: date-time
               * @description The date the machine was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the machine was deleted.
               */
              readonly dtDeleted: Date;
              /**
               * Format: date-time
               * @description The date the machine was last modified.
               */
              readonly dtModified: Date;
              /** @description The ID of the machine. */
              readonly id: string;
              /** @description The type of the machine. */
              readonly machineType: string;
              /** @description The name of the machine. */
              readonly name: string;
              /** @description The ID of the network the machine is on. */
              readonly networkId: string | null;
              /** @description The operating system of the machine. */
              readonly os: string;
              /** @description The private IP address of the machine. */
              readonly privateIp: string | null;
              /** @description The public IP address of the machine. */
              readonly publicIp: string | null;
              /**
               * @description The public IP type.
               * @enum {string}
               */
              readonly publicIpType: "static" | "dynamic" | "none";
              /**
               * Format: int64
               * @description The amount of RAM in bytes.
               */
              readonly ram: number;
              /** @description The region of the machine. */
              readonly region: string;
              /** @description Whether a restore point is enabled. */
              readonly restorePointEnabled: boolean;
              /**
               * @description The frequency of restore points.
               * @enum {string|null}
               */
              readonly restorePointFrequency: "shutdown" | null;
              /** @description The ID of the snapshot to use as a restore point. */
              readonly restorePointSnapshotId: string | null;
              /**
               * @description The state of the machine.
               * @enum {string}
               */
              readonly state:
                | "off"
                | "starting"
                | "stopping"
                | "restarting"
                | "serviceready"
                | "ready"
                | "upgrading"
                | "provisioning";
              /** @description The storage rate of the machine. */
              readonly storageRate: number;
              /**
               * Format: int64
               * @description The total amount of storage.
               */
              readonly storageTotal: number;
              /**
               * Format: int64
               * @description The amount of storage used.
               */
              readonly storageUsed: number;
              /** @description Whether updates are pending. */
              readonly updatesPending: boolean;
              /** @description The usage rate of the machine. */
              readonly usageRate: number;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event?: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a machine
   * @description Deletes a single machine by ID.
   */
  "machines-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to delete. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The machine. */
            readonly data: {
              /** @description The accelerators of the machine. */
              readonly accelerators?:
                | (readonly ({
                  /** @description The number of accelerators of this type. */
                  readonly count: number;
                  /** @description The amount of memory the accelerator has, if applicable. */
                  readonly memory: number | null;
                  /** @description The name of the accelerator. */
                  readonly name: string;
                })[])
                | null;
              /** @description The agent type of the machine. */
              readonly agentType: string;
              /** @description Whether auto shutdown is enabled. */
              readonly autoShutdownEnabled: boolean;
              /** @description Whether to force shutdown the machine. */
              readonly autoShutdownForce: boolean | null;
              /** @description The shutdown timeout of the machine in hours. */
              readonly autoShutdownTimeout: number | null;
              /** @description Whether auto snapshots are enabled. */
              readonly autoSnapshotEnabled: boolean;
              /**
               * @description The frequency of auto snapshots.
               * @enum {string|null}
               */
              readonly autoSnapshotFrequency:
                | "hourly"
                | "daily"
                | "weekly"
                | "monthly"
                | null;
              /** @description The number of auto snapshots to save. */
              readonly autoSnapshotSaveCount: number | null;
              /** @description The number of CPUs. */
              readonly cpus: number;
              /**
               * Format: date-time
               * @description The date the machine was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the machine was deleted.
               */
              readonly dtDeleted: Date;
              /**
               * Format: date-time
               * @description The date the machine was last modified.
               */
              readonly dtModified: Date;
              /** @description The ID of the machine. */
              readonly id: string;
              /** @description The type of the machine. */
              readonly machineType: string;
              /** @description The name of the machine. */
              readonly name: string;
              /** @description The ID of the network the machine is on. */
              readonly networkId: string | null;
              /** @description The operating system of the machine. */
              readonly os: string;
              /** @description The private IP address of the machine. */
              readonly privateIp: string | null;
              /** @description The public IP address of the machine. */
              readonly publicIp: string | null;
              /**
               * @description The public IP type.
               * @enum {string}
               */
              readonly publicIpType: "static" | "dynamic" | "none";
              /**
               * Format: int64
               * @description The amount of RAM in bytes.
               */
              readonly ram: number;
              /** @description The region of the machine. */
              readonly region: string;
              /** @description Whether a restore point is enabled. */
              readonly restorePointEnabled: boolean;
              /**
               * @description The frequency of restore points.
               * @enum {string|null}
               */
              readonly restorePointFrequency: "shutdown" | null;
              /** @description The ID of the snapshot to use as a restore point. */
              readonly restorePointSnapshotId: string | null;
              /**
               * @description The state of the machine.
               * @enum {string}
               */
              readonly state:
                | "off"
                | "starting"
                | "stopping"
                | "restarting"
                | "serviceready"
                | "ready"
                | "upgrading"
                | "provisioning";
              /** @description The storage rate of the machine. */
              readonly storageRate: number;
              /**
               * Format: int64
               * @description The total amount of storage.
               */
              readonly storageTotal: number;
              /**
               * Format: int64
               * @description The amount of storage used.
               */
              readonly storageUsed: number;
              /** @description Whether updates are pending. */
              readonly updatesPending: boolean;
              /** @description The usage rate of the machine. */
              readonly usageRate: number;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List accessors
   * @description Lists the team members that can explicitly access a machine.
   */
  "machines-listAccessors": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "id";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
      readonly path: {
        /** @description The ID of the machine. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the user was removed from the machine as an accessor.
               * @default null
               */
              readonly dtDeleted?: Date;
              /** @description The user that can access the machine */
              readonly user: {
                /**
                 * Format: email
                 * @description The email address of the user
                 */
                readonly email: string;
                /**
                 * @description The first name of the user
                 * @default null
                 */
                readonly firstName?: string | null;
                /** @description The ID of the user */
                readonly id: string;
                /**
                 * @description The last name of the user
                 * @default null
                 */
                readonly lastName?: string | null;
                /**
                 * @description The URL of the team's profile image.
                 * @default null
                 */
                readonly publicProfileImageUrl?: string | null;
              };
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Add an accessor
   * @description Adds an accessor to a machine.
   */
  "machines-addAccessor": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to add an accessor to. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The ID of the user to add as an accessor. */
          readonly userId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the user was removed from the machine as an accessor.
             * @default null
             */
            readonly dtDeleted?: Date;
            /** @description The user that can access the machine */
            readonly user: {
              /**
               * Format: email
               * @description The email address of the user
               */
              readonly email: string;
              /**
               * @description The first name of the user
               * @default null
               */
              readonly firstName?: string | null;
              /** @description The ID of the user */
              readonly id: string;
              /**
               * @description The last name of the user
               * @default null
               */
              readonly lastName?: string | null;
              /**
               * @description The URL of the team's profile image.
               * @default null
               */
              readonly publicProfileImageUrl?: string | null;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get an accessor
   * @description Get an accessor for a machine.
   */
  "machines-getAccessor": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to get an accessor for. */
        id: string;
        /** @description The ID of the user to get. */
        userId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the user was removed from the machine as an accessor.
             * @default null
             */
            readonly dtDeleted?: Date;
            /** @description The user that can access the machine */
            readonly user: {
              /**
               * Format: email
               * @description The email address of the user
               */
              readonly email: string;
              /**
               * @description The first name of the user
               * @default null
               */
              readonly firstName?: string | null;
              /** @description The ID of the user */
              readonly id: string;
              /**
               * @description The last name of the user
               * @default null
               */
              readonly lastName?: string | null;
              /**
               * @description The URL of the team's profile image.
               * @default null
               */
              readonly publicProfileImageUrl?: string | null;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete an accessor
   * @description Deletes an accessor from a machine.
   */
  "machines-removeAccessor": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to add an accessor to. */
        id: string;
        /** @description The ID of the user to add as an accessor. */
        userId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the user was removed from the machine as an accessor.
             * @default null
             */
            readonly dtDeleted?: Date;
            /** @description The user that can access the machine */
            readonly user: {
              /**
               * Format: email
               * @description The email address of the user
               */
              readonly email: string;
              /**
               * @description The first name of the user
               * @default null
               */
              readonly firstName?: string | null;
              /** @description The ID of the user */
              readonly id: string;
              /**
               * @description The last name of the user
               * @default null
               */
              readonly lastName?: string | null;
              /**
               * @description The URL of the team's profile image.
               * @default null
               */
              readonly publicProfileImageUrl?: string | null;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get desktop settings
   * @description Gets the machine settings that are used to configure desktop streaming.
   */
  "machines-getDesktop": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Settings for Linux desktop machines. */
            readonly vnc?: {
              /** @description The VNC hostname. */
              readonly hostname: string;
              /** @description The VNC password. */
              readonly password: string;
              /** @description The port VNC is listening on. */
              readonly port: number;
            };
            /** @description Settings for Windows desktop machines. */
            readonly windows?: {
              /** @description The Windows hostname. */
              readonly hostname: string;
              /** @description The port Windows is listening on. */
              readonly port: number;
              /** @description The public IP of the machine. */
              readonly publicIp?: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Restart a machine
   * @description Restarts a machine.
   */
  "machines-restart": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to restart. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The machine. */
            readonly data: {
              /** @description The accelerators of the machine. */
              readonly accelerators?:
                | (readonly ({
                  /** @description The number of accelerators of this type. */
                  readonly count: number;
                  /** @description The amount of memory the accelerator has, if applicable. */
                  readonly memory: number | null;
                  /** @description The name of the accelerator. */
                  readonly name: string;
                })[])
                | null;
              /** @description The agent type of the machine. */
              readonly agentType: string;
              /** @description Whether auto shutdown is enabled. */
              readonly autoShutdownEnabled: boolean;
              /** @description Whether to force shutdown the machine. */
              readonly autoShutdownForce: boolean | null;
              /** @description The shutdown timeout of the machine in hours. */
              readonly autoShutdownTimeout: number | null;
              /** @description Whether auto snapshots are enabled. */
              readonly autoSnapshotEnabled: boolean;
              /**
               * @description The frequency of auto snapshots.
               * @enum {string|null}
               */
              readonly autoSnapshotFrequency:
                | "hourly"
                | "daily"
                | "weekly"
                | "monthly"
                | null;
              /** @description The number of auto snapshots to save. */
              readonly autoSnapshotSaveCount: number | null;
              /** @description The number of CPUs. */
              readonly cpus: number;
              /**
               * Format: date-time
               * @description The date the machine was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the machine was deleted.
               */
              readonly dtDeleted: Date;
              /**
               * Format: date-time
               * @description The date the machine was last modified.
               */
              readonly dtModified: Date;
              /** @description The ID of the machine. */
              readonly id: string;
              /** @description The type of the machine. */
              readonly machineType: string;
              /** @description The name of the machine. */
              readonly name: string;
              /** @description The ID of the network the machine is on. */
              readonly networkId: string | null;
              /** @description The operating system of the machine. */
              readonly os: string;
              /** @description The private IP address of the machine. */
              readonly privateIp: string | null;
              /** @description The public IP address of the machine. */
              readonly publicIp: string | null;
              /**
               * @description The public IP type.
               * @enum {string}
               */
              readonly publicIpType: "static" | "dynamic" | "none";
              /**
               * Format: int64
               * @description The amount of RAM in bytes.
               */
              readonly ram: number;
              /** @description The region of the machine. */
              readonly region: string;
              /** @description Whether a restore point is enabled. */
              readonly restorePointEnabled: boolean;
              /**
               * @description The frequency of restore points.
               * @enum {string|null}
               */
              readonly restorePointFrequency: "shutdown" | null;
              /** @description The ID of the snapshot to use as a restore point. */
              readonly restorePointSnapshotId: string | null;
              /**
               * @description The state of the machine.
               * @enum {string}
               */
              readonly state:
                | "off"
                | "starting"
                | "stopping"
                | "restarting"
                | "serviceready"
                | "ready"
                | "upgrading"
                | "provisioning";
              /** @description The storage rate of the machine. */
              readonly storageRate: number;
              /**
               * Format: int64
               * @description The total amount of storage.
               */
              readonly storageTotal: number;
              /**
               * Format: int64
               * @description The amount of storage used.
               */
              readonly storageUsed: number;
              /** @description Whether updates are pending. */
              readonly updatesPending: boolean;
              /** @description The usage rate of the machine. */
              readonly usageRate: number;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Start a machine
   * @description Starts a machine.
   */
  "machines-start": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to start. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The machine. */
            readonly data: {
              /** @description The accelerators of the machine. */
              readonly accelerators?:
                | (readonly ({
                  /** @description The number of accelerators of this type. */
                  readonly count: number;
                  /** @description The amount of memory the accelerator has, if applicable. */
                  readonly memory: number | null;
                  /** @description The name of the accelerator. */
                  readonly name: string;
                })[])
                | null;
              /** @description The agent type of the machine. */
              readonly agentType: string;
              /** @description Whether auto shutdown is enabled. */
              readonly autoShutdownEnabled: boolean;
              /** @description Whether to force shutdown the machine. */
              readonly autoShutdownForce: boolean | null;
              /** @description The shutdown timeout of the machine in hours. */
              readonly autoShutdownTimeout: number | null;
              /** @description Whether auto snapshots are enabled. */
              readonly autoSnapshotEnabled: boolean;
              /**
               * @description The frequency of auto snapshots.
               * @enum {string|null}
               */
              readonly autoSnapshotFrequency:
                | "hourly"
                | "daily"
                | "weekly"
                | "monthly"
                | null;
              /** @description The number of auto snapshots to save. */
              readonly autoSnapshotSaveCount: number | null;
              /** @description The number of CPUs. */
              readonly cpus: number;
              /**
               * Format: date-time
               * @description The date the machine was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the machine was deleted.
               */
              readonly dtDeleted: Date;
              /**
               * Format: date-time
               * @description The date the machine was last modified.
               */
              readonly dtModified: Date;
              /** @description The ID of the machine. */
              readonly id: string;
              /** @description The type of the machine. */
              readonly machineType: string;
              /** @description The name of the machine. */
              readonly name: string;
              /** @description The ID of the network the machine is on. */
              readonly networkId: string | null;
              /** @description The operating system of the machine. */
              readonly os: string;
              /** @description The private IP address of the machine. */
              readonly privateIp: string | null;
              /** @description The public IP address of the machine. */
              readonly publicIp: string | null;
              /**
               * @description The public IP type.
               * @enum {string}
               */
              readonly publicIpType: "static" | "dynamic" | "none";
              /**
               * Format: int64
               * @description The amount of RAM in bytes.
               */
              readonly ram: number;
              /** @description The region of the machine. */
              readonly region: string;
              /** @description Whether a restore point is enabled. */
              readonly restorePointEnabled: boolean;
              /**
               * @description The frequency of restore points.
               * @enum {string|null}
               */
              readonly restorePointFrequency: "shutdown" | null;
              /** @description The ID of the snapshot to use as a restore point. */
              readonly restorePointSnapshotId: string | null;
              /**
               * @description The state of the machine.
               * @enum {string}
               */
              readonly state:
                | "off"
                | "starting"
                | "stopping"
                | "restarting"
                | "serviceready"
                | "ready"
                | "upgrading"
                | "provisioning";
              /** @description The storage rate of the machine. */
              readonly storageRate: number;
              /**
               * Format: int64
               * @description The total amount of storage.
               */
              readonly storageTotal: number;
              /**
               * Format: int64
               * @description The amount of storage used.
               */
              readonly storageUsed: number;
              /** @description Whether updates are pending. */
              readonly updatesPending: boolean;
              /** @description The usage rate of the machine. */
              readonly usageRate: number;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Stop a machine
   * @description Stops a machine.
   */
  "machines-stop": {
    parameters: {
      readonly path: {
        /** @description The ID of the machine to stop. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The machine. */
            readonly data: {
              /** @description The accelerators of the machine. */
              readonly accelerators?:
                | (readonly ({
                  /** @description The number of accelerators of this type. */
                  readonly count: number;
                  /** @description The amount of memory the accelerator has, if applicable. */
                  readonly memory: number | null;
                  /** @description The name of the accelerator. */
                  readonly name: string;
                })[])
                | null;
              /** @description The agent type of the machine. */
              readonly agentType: string;
              /** @description Whether auto shutdown is enabled. */
              readonly autoShutdownEnabled: boolean;
              /** @description Whether to force shutdown the machine. */
              readonly autoShutdownForce: boolean | null;
              /** @description The shutdown timeout of the machine in hours. */
              readonly autoShutdownTimeout: number | null;
              /** @description Whether auto snapshots are enabled. */
              readonly autoSnapshotEnabled: boolean;
              /**
               * @description The frequency of auto snapshots.
               * @enum {string|null}
               */
              readonly autoSnapshotFrequency:
                | "hourly"
                | "daily"
                | "weekly"
                | "monthly"
                | null;
              /** @description The number of auto snapshots to save. */
              readonly autoSnapshotSaveCount: number | null;
              /** @description The number of CPUs. */
              readonly cpus: number;
              /**
               * Format: date-time
               * @description The date the machine was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the machine was deleted.
               */
              readonly dtDeleted: Date;
              /**
               * Format: date-time
               * @description The date the machine was last modified.
               */
              readonly dtModified: Date;
              /** @description The ID of the machine. */
              readonly id: string;
              /** @description The type of the machine. */
              readonly machineType: string;
              /** @description The name of the machine. */
              readonly name: string;
              /** @description The ID of the network the machine is on. */
              readonly networkId: string | null;
              /** @description The operating system of the machine. */
              readonly os: string;
              /** @description The private IP address of the machine. */
              readonly privateIp: string | null;
              /** @description The public IP address of the machine. */
              readonly publicIp: string | null;
              /**
               * @description The public IP type.
               * @enum {string}
               */
              readonly publicIpType: "static" | "dynamic" | "none";
              /**
               * Format: int64
               * @description The amount of RAM in bytes.
               */
              readonly ram: number;
              /** @description The region of the machine. */
              readonly region: string;
              /** @description Whether a restore point is enabled. */
              readonly restorePointEnabled: boolean;
              /**
               * @description The frequency of restore points.
               * @enum {string|null}
               */
              readonly restorePointFrequency: "shutdown" | null;
              /** @description The ID of the snapshot to use as a restore point. */
              readonly restorePointSnapshotId: string | null;
              /**
               * @description The state of the machine.
               * @enum {string}
               */
              readonly state:
                | "off"
                | "starting"
                | "stopping"
                | "restarting"
                | "serviceready"
                | "ready"
                | "upgrading"
                | "provisioning";
              /** @description The storage rate of the machine. */
              readonly storageRate: number;
              /**
               * Format: int64
               * @description The total amount of storage.
               */
              readonly storageTotal: number;
              /**
               * Format: int64
               * @description The amount of storage used.
               */
              readonly storageUsed: number;
              /** @description Whether updates are pending. */
              readonly updatesPending: boolean;
              /** @description The usage rate of the machine. */
              readonly usageRate: number;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List notebooks
   * @description Lists the notebooks you have access to in the current team
   */
  "notebooks-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description Search for notebooks by their name */
        name?: string;
        /** @description The state of the notebook. */
        state?:
          | "Cancel"
          | "Cancelled"
          | "Error"
          | "Failed"
          | "Pending"
          | "Preempted"
          | "Provisioned"
          | "Running"
          | "Stopped";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the notebook was created
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the notebook was last modified
               */
              readonly dtModified: Date;
              /**
               * Format: date-time
               * @description The date the notebook was last started
               */
              readonly dtStarted: Date;
              /** @description The ID of the notebook */
              readonly id: string;
              /** @description The type of the machine the notebook is running on */
              readonly machineType: string | null;
              /** @description The name of the notebook */
              readonly name: string;
              /** @description The notebook repo ID */
              readonly notebookRepoId: string | null;
              /** @description The project ID */
              readonly projectId: string;
              /** @description The last user to start the notebook */
              readonly startedByUser: {
                /**
                 * Format: email
                 * @description The email address of the user
                 */
                readonly email: string;
                /**
                 * @description The first name of the user
                 * @default null
                 */
                readonly firstName?: string | null;
                /** @description The ID of the user */
                readonly id: string;
                /**
                 * @description The last name of the user
                 * @default null
                 */
                readonly lastName?: string | null;
                /**
                 * @description The URL of the team's profile image.
                 * @default null
                 */
                readonly publicProfileImageUrl?: string | null;
              };
              /**
               * @description The state of the notebook.
               * @enum {string}
               */
              readonly state:
                | "Cancel"
                | "Cancelled"
                | "Error"
                | "Failed"
                | "Pending"
                | "Preempted"
                | "Provisioned"
                | "Running"
                | "Stopped";
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List private networks
   * @description Fetches a list of private networks.
   */
  "privateNetworks-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        name?: string;
        region?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the private network was created.
               */
              readonly dtCreated: Date;
              /** @description The date the private network was deleted. */
              readonly dtDeleted?: (Record<string, never> | Date) | null;
              /** @description The ID of the private network. */
              readonly id: string;
              /** @description The name of the private network. */
              readonly name: string;
              /** @description The subnet mask of the private network. */
              readonly netmask: string;
              /** @description The network prefix of the private network. */
              readonly network: string;
              /** @description The region the private network is in. */
              readonly region: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a private network
   * @description Creates a new private network.
   */
  "privateNetworks-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * @description Whether to migrate all machines not currently in a private network to the new private network.
           * @default false
           */
          readonly migrateMachines?: boolean;
          /** @description The name of the private network. */
          readonly name: string;
          /** @description The region the private network is in. */
          readonly region: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the private network was created.
             */
            readonly dtCreated: Date;
            /** @description The date the private network was deleted. */
            readonly dtDeleted?: (Record<string, never> | Date) | null;
            /** @description The ID of the private network. */
            readonly id: string;
            /** @description The name of the private network. */
            readonly name: string;
            /** @description The subnet mask of the private network. */
            readonly netmask: string;
            /** @description The network prefix of the private network. */
            readonly network: string;
            /** @description The region the private network is in. */
            readonly region: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a private network
   * @description Fetches a single private network by ID.
   */
  "privateNetworks-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the private network to fetch. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json":
            | ({
              /**
               * Format: date-time
               * @description The date the private network was created.
               */
              readonly dtCreated: Date;
              /** @description The date the private network was deleted. */
              readonly dtDeleted?: (Record<string, never> | Date) | null;
              /** @description The ID of the private network. */
              readonly id: string;
              /** @description The name of the private network. */
              readonly name: string;
              /** @description The subnet mask of the private network. */
              readonly netmask: string;
              /** @description The network prefix of the private network. */
              readonly network: string;
              /** @description The region the private network is in. */
              readonly region: string;
            })
            | null;
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a private network
   * @description Updates a single private network by ID.
   */
  "privateNetworks-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the private network to update. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the private network. */
          readonly name?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the private network was created.
             */
            readonly dtCreated: Date;
            /** @description The date the private network was deleted. */
            readonly dtDeleted?: (Record<string, never> | Date) | null;
            /** @description The ID of the private network. */
            readonly id: string;
            /** @description The name of the private network. */
            readonly name: string;
            /** @description The subnet mask of the private network. */
            readonly netmask: string;
            /** @description The network prefix of the private network. */
            readonly network: string;
            /** @description The region the private network is in. */
            readonly region: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a private network
   * @description Deletes a single private network by ID.
   */
  "privateNetworks-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the private network to delete. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the private network to delete. */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List projects
   * @description
   *         List projects. This endpoint supports pagination and sorting.
   */
  "projects-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the project was created
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the project was deleted
               * @default null
               */
              readonly dtDeleted?: Date;
              /** @description The ID of the project */
              readonly id: string;
              /** @description The name of the project */
              readonly name: string;
              /**
               * @description The name of the GitHub repository if this is is a GitHub-connected project.
               * @default null
               */
              readonly repoName?: string | null;
              /**
               * @description The node ID of the GitHub repository if this is is a GitHub-connected project.
               * @default null
               */
              readonly repoNodeId?: string | null;
              /**
               * @description The URL of the GitHub repository if this is is a GitHub-connected project.
               * @default null
               */
              readonly repoUrl?: string | null;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a project
   * @description Create a project
   */
  "projects-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the project */
          readonly name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the project was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the project was deleted
             * @default null
             */
            readonly dtDeleted?: Date;
            /** @description The ID of the project */
            readonly id: string;
            /** @description The name of the project */
            readonly name: string;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoName?: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoNodeId?: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoUrl?: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a project by its ID
   * @description Get a project by its ID.
   */
  "projects-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the project to get */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the project was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the project was deleted
             * @default null
             */
            readonly dtDeleted?: Date;
            /** @description The ID of the project */
            readonly id: string;
            /** @description The name of the project */
            readonly name: string;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoName?: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoNodeId?: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoUrl?: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a project
   * @description Update a project
   */
  "projects-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the project to update */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The new name of the project */
          readonly name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the project was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the project was deleted
             * @default null
             */
            readonly dtDeleted?: Date;
            /** @description The ID of the project */
            readonly id: string;
            /** @description The name of the project */
            readonly name: string;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoName?: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoNodeId?: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoUrl?: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a project
   * @description Delete a project
   */
  "projects-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the project to delete */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the project was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the project was deleted
             * @default null
             */
            readonly dtDeleted?: Date;
            /** @description The ID of the project */
            readonly id: string;
            /** @description The name of the project */
            readonly name: string;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoName?: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoNodeId?: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project.
             * @default null
             */
            readonly repoUrl?: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's activity
   * @description Fetches a list of activity items for a given project.
   */
  "projectActivity-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description Constrain results to deployment activity. */
        deploymentId?: string;
        /** @description The name of the deployment to filter by */
        name?: string;
      };
      readonly path: {
        /** @description The ID of the project to fetch activity items for */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The action that was performed */
              readonly action:
                | "deployment.scaled"
                | "deployment.created"
                | "deployment.deleted"
                | "deployment.updated"
                | "deployment.enabled"
                | "deployment.disabled"
                | "deployment.autoscaling.enabled"
                | "deployment.autoscaling.disabled";
              /**
               * @description The actor that performed the action. Either a use or system.
               * @default null
               */
              readonly actor?:
                | ({
                  /**
                   * @description The avatar URL of the actor
                   * @default null
                   */
                  readonly avatarUrl?: string | null;
                  /**
                   * @description The email of the actor
                   * @default null
                   */
                  readonly email?: string | null;
                  /**
                   * @description The full name of the actor (e.g. "John Doe")
                   * @default null
                   */
                  readonly fullName?: string | null;
                })
                | null;
              /**
               * @description The data associated with the activity item
               * @default null
               */
              readonly data?: {
                readonly from: number;
                readonly to: number;
              } | null;
              /**
               * @description The deployment associated with the activity item
               * @default null
               */
              readonly deployment?: {
                /** @description The ID of the deployment */
                readonly id: string;
                /** @description The name of the deployment */
                readonly name: string;
              } | null;
              /**
               * Format: date-time
               * @description The date the activity item was created
               */
              readonly dtCreated: Date;
              /**
               * Format: uuid
               * @description ID of the activity item
               */
              readonly id: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's apps
   * @description Fetches a list of apps for a project.
   */
  "projectApps-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description The name of the app to filter by */
        name?: string;
      };
      readonly path: {
        /** @description The ID of the project to fetch apps for */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the deployment was created
               */
              readonly dtCreated: Date;
              /** @description The unique endpoint for the deployment */
              readonly endpoint: string;
              /** @description The ID of the deployment */
              readonly id: string;
              /**
               * @description The latest deployment configuration. If invalid, null is returned.
               * @default null
               */
              readonly latestSpec?:
                | ({
                  /** @description The data for the deployment spec */
                  readonly data?:
                    | (
                      | (
                        | ({
                          /** @enum {string} */
                          readonly apiVersion: "v0alpha0";
                          readonly command?: readonly (string)[];
                          readonly containerRegistry?: string;
                          /** @default true */
                          readonly enabled?: boolean;
                          readonly env?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly healthChecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly image: string;
                          readonly models?: readonly ({
                            readonly id: string;
                            readonly path?: string;
                          })[];
                          readonly name: string;
                          /** @default 80 */
                          readonly port?: number;
                          readonly region?: string;
                          readonly repositories?: {
                            readonly dataset: string;
                            readonly mountPath?: string;
                            readonly repositories: readonly ({
                              readonly name: string;
                              readonly password?: string;
                              readonly ref?: string;
                              readonly url: string;
                              readonly username?: string;
                            })[];
                          };
                          readonly resources: {
                            readonly autoscaling?: {
                              readonly enabled?: boolean;
                              readonly maxReplicas: number;
                              readonly metrics: readonly (
                                | {
                                  /** @enum {string} */
                                  readonly metric: "requestDuration";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                }
                                | ({
                                  /** @enum {string} */
                                  readonly metric: "cpu" | "memory";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                })
                              )[];
                            };
                            readonly instanceType: string;
                            /** @default 1 */
                            readonly replicas?: number;
                          };
                        })
                        | ({
                          /** @enum {string} */
                          readonly apiVersion: "v0alpha1";
                          readonly command?: readonly (string)[];
                          readonly containerRegistry?: string;
                          /** @default true */
                          readonly enabled?: boolean;
                          readonly env?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly healthchecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly healthChecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly image: string;
                          readonly integrations?: readonly ({
                            readonly id: string;
                            readonly name: string;
                            /** @default /opt/models */
                            readonly path?: string;
                            /** @enum {string} */
                            readonly type: "model";
                          } | {
                            readonly accessKeyId: string;
                            readonly endpoint?: string;
                            readonly name: string;
                            readonly path?: string;
                            readonly region?: string;
                            readonly secretAccessKey: string;
                            /** @enum {string} */
                            readonly type: "s3";
                            readonly url: string;
                          } | {
                            readonly name: string;
                            /** @enum {string} */
                            readonly type: "volume";
                          } | {
                            readonly name: string;
                            readonly path?: string;
                            /** @enum {string} */
                            readonly type: "git-lfs";
                            /** Format: uri */
                            readonly url: string;
                          })[];
                          readonly name: string;
                          readonly region?: string;
                          readonly resources: {
                            readonly autoscaling?: {
                              readonly enabled?: boolean;
                              readonly maxReplicas: number;
                              readonly metrics: readonly (
                                | {
                                  /** @enum {string} */
                                  readonly metric: "requestDuration";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                }
                                | ({
                                  /** @enum {string} */
                                  readonly metric: "cpu" | "memory";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                })
                              )[];
                            };
                            readonly machineType: string;
                            readonly ports: readonly (number)[];
                            /** @default 1 */
                            readonly replicas?: number;
                          };
                        })
                      )
                      | ({
                        readonly apiVersion: "v1" | "latest";
                        readonly command?: readonly (string)[];
                        readonly containerRegistry?: string;
                        /** @default true */
                        readonly enabled?: boolean;
                        readonly env?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly healthchecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly healthChecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly image: string;
                        readonly integrations?: readonly ({
                          readonly id: string;
                          readonly name: string;
                          /** @default /opt/models */
                          readonly path?: string;
                          /** @enum {string} */
                          readonly type: "model";
                        } | {
                          readonly accessKeyId: string;
                          readonly endpoint?: string;
                          readonly name: string;
                          readonly path?: string;
                          readonly region?: string;
                          readonly secretAccessKey: string;
                          /** @enum {string} */
                          readonly type: "s3";
                          readonly url: string;
                        } | {
                          readonly name: string;
                          /** @enum {string} */
                          readonly type: "volume";
                        } | {
                          readonly name: string;
                          readonly path?: string;
                          /** @enum {string} */
                          readonly type: "git-lfs";
                          /** Format: uri */
                          readonly url: string;
                        })[];
                        readonly name: string;
                        readonly region?: string;
                        readonly resources: {
                          readonly autoscaling?: {
                            readonly enabled?: boolean;
                            readonly maxReplicas: number;
                            readonly metrics: readonly (
                              | {
                                /** @enum {string} */
                                readonly metric: "requestDuration";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              }
                              | ({
                                /** @enum {string} */
                                readonly metric: "cpu" | "memory";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              })
                            )[];
                          };
                          readonly machineType: string;
                          readonly ports: readonly (number)[];
                          /** @default 1 */
                          readonly replicas?: number;
                        };
                      })
                    )
                    | null;
                  /** @description The ID of the deployment the spec belongs to */
                  readonly deploymentId: string;
                  /**
                   * Format: date-time
                   * @description The date the deployment was marked "healthy"
                   * @default null
                   */
                  readonly dtHealthy?: Date;
                  /**
                   * @description The fatal configuration error. Only present if the cluster was unable to apply the entire deployment configuration. This is not the same as an instance error.
                   * @default null
                   */
                  readonly error?: string | null;
                  /**
                   * Format: date-time
                   * @description The date the deployment configuration was applied to the cluster
                   * @default null
                   */
                  readonly externalApplied?: Date;
                  /** @description The ID of the deployment spec */
                  readonly id: string;
                  /**
                   * @description Metadata about the source of the configuration
                   * @default null
                   */
                  readonly metadata?:
                    | ({
                      readonly gitHeaders?: {
                        readonly "x-git-actor": string;
                        readonly "x-git-host": "github" | "gitlab";
                        readonly "x-git-owner": string;
                        readonly "x-git-ref": string;
                        readonly "x-git-repo": string;
                        readonly "x-git-sha": string;
                      };
                    })
                    | null;
                  /** @description The ID of the user the deployment belongs to */
                  readonly userId: string;
                })
                | null;
              /**
               * @description The last version hash for the deployment
               * @default null
               */
              readonly latestSpecHash?: string | null;
              /** @description The name of the deployment */
              readonly name: string;
              /** @description The ID of the project the deployment belongs to */
              readonly projectId: string;
              /** @description The ID of the team the deployment belongs to */
              readonly teamId: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's collaborators
   * @description Fetches a list of collaborators for a project.
   */
  "projectCollaborators-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
      readonly path: {
        /** @description The ID of the project. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the collaborate was added to the project
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the collaborator was removed from the project
               * @default null
               */
              readonly dtDeleted?: Date;
              /** @description The user that can access the project */
              readonly user: {
                /**
                 * Format: email
                 * @description The email address of the user
                 */
                readonly email: string;
                /**
                 * @description The first name of the user
                 * @default null
                 */
                readonly firstName?: string | null;
                /** @description The ID of the user */
                readonly id: string;
                /**
                 * @description The last name of the user
                 * @default null
                 */
                readonly lastName?: string | null;
                /**
                 * @description The URL of the team's profile image.
                 * @default null
                 */
                readonly publicProfileImageUrl?: string | null;
              };
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a project collaborator
   * @description Adds a new collaborator to a project.
   */
  "projectCollaborators-create": {
    parameters: {
      readonly path: {
        /** @description The ID of the project. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The ID of the user to add to the project. */
          readonly userId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the collaborate was added to the project
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the collaborator was removed from the project
             * @default null
             */
            readonly dtDeleted?: Date;
            /** @description The user that can access the project */
            readonly user: {
              /**
               * Format: email
               * @description The email address of the user
               */
              readonly email: string;
              /**
               * @description The first name of the user
               * @default null
               */
              readonly firstName?: string | null;
              /** @description The ID of the user */
              readonly id: string;
              /**
               * @description The last name of the user
               * @default null
               */
              readonly lastName?: string | null;
              /**
               * @description The URL of the team's profile image.
               * @default null
               */
              readonly publicProfileImageUrl?: string | null;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a project collaborator
   * @description Removes a collaborator from a project.
   */
  "projectCollaborators-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the project. */
        id: string;
        /** @description The ID of the user to remove from the project. */
        userId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the user removed from the project. */
            readonly userId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's deployments
   * @description Fetches a list of deployments for a project.
   */
  "projectDeployments-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description The name of the app to filter by */
        name?: string;
      };
      readonly path: {
        /** @description The ID of the project to fetch deployments for */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the deployment was created
               */
              readonly dtCreated: Date;
              /** @description The unique endpoint for the deployment */
              readonly endpoint: string;
              /** @description The ID of the deployment */
              readonly id: string;
              /**
               * @description The latest deployment configuration. If invalid, null is returned.
               * @default null
               */
              readonly latestSpec?:
                | ({
                  /** @description The data for the deployment spec */
                  readonly data?:
                    | (
                      | (
                        | ({
                          /** @enum {string} */
                          readonly apiVersion: "v0alpha0";
                          readonly command?: readonly (string)[];
                          readonly containerRegistry?: string;
                          /** @default true */
                          readonly enabled?: boolean;
                          readonly env?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly healthChecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly image: string;
                          readonly models?: readonly ({
                            readonly id: string;
                            readonly path?: string;
                          })[];
                          readonly name: string;
                          /** @default 80 */
                          readonly port?: number;
                          readonly region?: string;
                          readonly repositories?: {
                            readonly dataset: string;
                            readonly mountPath?: string;
                            readonly repositories: readonly ({
                              readonly name: string;
                              readonly password?: string;
                              readonly ref?: string;
                              readonly url: string;
                              readonly username?: string;
                            })[];
                          };
                          readonly resources: {
                            readonly autoscaling?: {
                              readonly enabled?: boolean;
                              readonly maxReplicas: number;
                              readonly metrics: readonly (
                                | {
                                  /** @enum {string} */
                                  readonly metric: "requestDuration";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                }
                                | ({
                                  /** @enum {string} */
                                  readonly metric: "cpu" | "memory";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                })
                              )[];
                            };
                            readonly instanceType: string;
                            /** @default 1 */
                            readonly replicas?: number;
                          };
                        })
                        | ({
                          /** @enum {string} */
                          readonly apiVersion: "v0alpha1";
                          readonly command?: readonly (string)[];
                          readonly containerRegistry?: string;
                          /** @default true */
                          readonly enabled?: boolean;
                          readonly env?: readonly ({
                            readonly name: string;
                            readonly value: string;
                          })[];
                          readonly healthchecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly healthChecks?: {
                            readonly liveness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly readiness?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                            readonly startup?: {
                              readonly failureThreshold?: number;
                              readonly headers?: readonly ({
                                readonly name: string;
                                readonly value: string;
                              })[];
                              readonly host?: string;
                              readonly initialDelaySeconds?: number;
                              readonly path: string;
                              readonly periodSeconds?: number;
                              readonly port?: number;
                              readonly timeoutSeconds?: number;
                            } | {
                              readonly exec: {
                                readonly command: readonly (string)[];
                              };
                              readonly failureThreshold?: number;
                              readonly initialDelaySeconds?: number;
                              readonly periodSeconds?: number;
                              readonly timeoutSeconds?: number;
                            };
                          };
                          readonly image: string;
                          readonly integrations?: readonly ({
                            readonly id: string;
                            readonly name: string;
                            /** @default /opt/models */
                            readonly path?: string;
                            /** @enum {string} */
                            readonly type: "model";
                          } | {
                            readonly accessKeyId: string;
                            readonly endpoint?: string;
                            readonly name: string;
                            readonly path?: string;
                            readonly region?: string;
                            readonly secretAccessKey: string;
                            /** @enum {string} */
                            readonly type: "s3";
                            readonly url: string;
                          } | {
                            readonly name: string;
                            /** @enum {string} */
                            readonly type: "volume";
                          } | {
                            readonly name: string;
                            readonly path?: string;
                            /** @enum {string} */
                            readonly type: "git-lfs";
                            /** Format: uri */
                            readonly url: string;
                          })[];
                          readonly name: string;
                          readonly region?: string;
                          readonly resources: {
                            readonly autoscaling?: {
                              readonly enabled?: boolean;
                              readonly maxReplicas: number;
                              readonly metrics: readonly (
                                | {
                                  /** @enum {string} */
                                  readonly metric: "requestDuration";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                }
                                | ({
                                  /** @enum {string} */
                                  readonly metric: "cpu" | "memory";
                                  /** @enum {string} */
                                  readonly summary: "average";
                                  readonly value: number;
                                })
                              )[];
                            };
                            readonly machineType: string;
                            readonly ports: readonly (number)[];
                            /** @default 1 */
                            readonly replicas?: number;
                          };
                        })
                      )
                      | ({
                        readonly apiVersion: "v1" | "latest";
                        readonly command?: readonly (string)[];
                        readonly containerRegistry?: string;
                        /** @default true */
                        readonly enabled?: boolean;
                        readonly env?: readonly ({
                          readonly name: string;
                          readonly value: string;
                        })[];
                        readonly healthchecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly healthChecks?: {
                          readonly liveness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly readiness?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                          readonly startup?: {
                            readonly failureThreshold?: number;
                            readonly headers?: readonly ({
                              readonly name: string;
                              readonly value: string;
                            })[];
                            readonly host?: string;
                            readonly initialDelaySeconds?: number;
                            readonly path: string;
                            readonly periodSeconds?: number;
                            readonly port?: number;
                            readonly timeoutSeconds?: number;
                          } | {
                            readonly exec: {
                              readonly command: readonly (string)[];
                            };
                            readonly failureThreshold?: number;
                            readonly initialDelaySeconds?: number;
                            readonly periodSeconds?: number;
                            readonly timeoutSeconds?: number;
                          };
                        };
                        readonly image: string;
                        readonly integrations?: readonly ({
                          readonly id: string;
                          readonly name: string;
                          /** @default /opt/models */
                          readonly path?: string;
                          /** @enum {string} */
                          readonly type: "model";
                        } | {
                          readonly accessKeyId: string;
                          readonly endpoint?: string;
                          readonly name: string;
                          readonly path?: string;
                          readonly region?: string;
                          readonly secretAccessKey: string;
                          /** @enum {string} */
                          readonly type: "s3";
                          readonly url: string;
                        } | {
                          readonly name: string;
                          /** @enum {string} */
                          readonly type: "volume";
                        } | {
                          readonly name: string;
                          readonly path?: string;
                          /** @enum {string} */
                          readonly type: "git-lfs";
                          /** Format: uri */
                          readonly url: string;
                        })[];
                        readonly name: string;
                        readonly region?: string;
                        readonly resources: {
                          readonly autoscaling?: {
                            readonly enabled?: boolean;
                            readonly maxReplicas: number;
                            readonly metrics: readonly (
                              | {
                                /** @enum {string} */
                                readonly metric: "requestDuration";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              }
                              | ({
                                /** @enum {string} */
                                readonly metric: "cpu" | "memory";
                                /** @enum {string} */
                                readonly summary: "average";
                                readonly value: number;
                              })
                            )[];
                          };
                          readonly machineType: string;
                          readonly ports: readonly (number)[];
                          /** @default 1 */
                          readonly replicas?: number;
                        };
                      })
                    )
                    | null;
                  /** @description The ID of the deployment the spec belongs to */
                  readonly deploymentId: string;
                  /**
                   * Format: date-time
                   * @description The date the deployment was marked "healthy"
                   * @default null
                   */
                  readonly dtHealthy?: Date;
                  /**
                   * @description The fatal configuration error. Only present if the cluster was unable to apply the entire deployment configuration. This is not the same as an instance error.
                   * @default null
                   */
                  readonly error?: string | null;
                  /**
                   * Format: date-time
                   * @description The date the deployment configuration was applied to the cluster
                   * @default null
                   */
                  readonly externalApplied?: Date;
                  /** @description The ID of the deployment spec */
                  readonly id: string;
                  /**
                   * @description Metadata about the source of the configuration
                   * @default null
                   */
                  readonly metadata?:
                    | ({
                      readonly gitHeaders?: {
                        readonly "x-git-actor": string;
                        readonly "x-git-host": "github" | "gitlab";
                        readonly "x-git-owner": string;
                        readonly "x-git-ref": string;
                        readonly "x-git-repo": string;
                        readonly "x-git-sha": string;
                      };
                    })
                    | null;
                  /** @description The ID of the user the deployment belongs to */
                  readonly userId: string;
                })
                | null;
              /**
               * @description The last version hash for the deployment
               * @default null
               */
              readonly latestSpecHash?: string | null;
              /** @description The name of the deployment */
              readonly name: string;
              /** @description The ID of the project the deployment belongs to */
              readonly projectId: string;
              /** @description The ID of the team the deployment belongs to */
              readonly teamId: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's models
   * @description Fetches a list of models for a project.
   */
  "projectModels-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description The name of the model to filter by */
        name?: string;
      };
      readonly path: {
        /** @description The ID of the project to fetch models for */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The description of the dataset */
              readonly description: string | null;
              /**
               * Format: date-time
               * @description The date the dataset was created
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the dataset was last modified
               */
              readonly dtModified: Date;
              /** @description The ID of the dataset */
              readonly id: string;
              /** @description Whether the dataset is public */
              readonly isPublic: boolean;
              /** @description The name of the dataset */
              readonly name: string;
              /** @description The ID of the project */
              readonly projectId: string | null;
              /** @description The ID of the storage provider */
              readonly storageProviderId: string | null;
              /** @description The ID of the team that owns the dataset */
              readonly teamId: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Add a model to a project
   * @description Adds a model to a project.
   */
  "projectModels-add": {
    parameters: {
      readonly path: {
        /** @description The ID of the project to add the model to */
        id: string;
        /** @description The ID of the model to add to the project */
        modelId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The description of the dataset */
            readonly description: string | null;
            /**
             * Format: date-time
             * @description The date the dataset was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the dataset was last modified
             */
            readonly dtModified: Date;
            /** @description The ID of the dataset */
            readonly id: string;
            /** @description Whether the dataset is public */
            readonly isPublic: boolean;
            /** @description The name of the dataset */
            readonly name: string;
            /** @description The ID of the project */
            readonly projectId: string | null;
            /** @description The ID of the storage provider */
            readonly storageProviderId: string | null;
            /** @description The ID of the team that owns the dataset */
            readonly teamId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Remove a model from project
   * @description Remove a model from project.
   */
  "projectModels-remove": {
    parameters: {
      readonly path: {
        /** @description The ID of the project to remove the model from */
        id: string;
        /** @description The ID of the model to remove from the project */
        modelId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The description of the dataset */
            readonly description: string | null;
            /**
             * Format: date-time
             * @description The date the dataset was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the dataset was last modified
             */
            readonly dtModified: Date;
            /** @description The ID of the dataset */
            readonly id: string;
            /** @description Whether the dataset is public */
            readonly isPublic: boolean;
            /** @description The name of the dataset */
            readonly name: string;
            /** @description The ID of the project */
            readonly projectId: string | null;
            /** @description The ID of the storage provider */
            readonly storageProviderId: string | null;
            /** @description The ID of the team that owns the dataset */
            readonly teamId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Remove a notebook from a project
   * @description Remove a notebook from a project.
   */
  "projectNotebooks-remove": {
    parameters: {
      readonly path: {
        /** @description The ID of the project to remove the notebook from */
        id: string;
        /** @description The ID of the notebook to remove from the project */
        notebookId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the notebook was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the notebook was last modified
             */
            readonly dtModified: Date;
            /**
             * Format: date-time
             * @description The date the notebook was last started
             */
            readonly dtStarted: Date;
            /** @description The ID of the notebook */
            readonly id: string;
            /** @description The type of the machine the notebook is running on */
            readonly machineType: string | null;
            /** @description The name of the notebook */
            readonly name: string;
            /** @description The notebook repo ID */
            readonly notebookRepoId: string | null;
            /** @description The project ID */
            readonly projectId: string;
            /** @description The last user to start the notebook */
            readonly startedByUser: {
              /**
               * Format: email
               * @description The email address of the user
               */
              readonly email: string;
              /**
               * @description The first name of the user
               * @default null
               */
              readonly firstName?: string | null;
              /** @description The ID of the user */
              readonly id: string;
              /**
               * @description The last name of the user
               * @default null
               */
              readonly lastName?: string | null;
              /**
               * @description The URL of the team's profile image.
               * @default null
               */
              readonly publicProfileImageUrl?: string | null;
            };
            /**
             * @description The state of the notebook.
             * @enum {string}
             */
            readonly state:
              | "Cancel"
              | "Cancelled"
              | "Error"
              | "Failed"
              | "Pending"
              | "Preempted"
              | "Provisioned"
              | "Running"
              | "Stopped";
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's notebooks
   * @description Fetches a list of notebooks for a project.
   */
  "projectNotebooks-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description The notebook name to filter by */
        name?: string;
        /** @description The state of the notebook. */
        state?:
          | "Cancel"
          | "Cancelled"
          | "Error"
          | "Failed"
          | "Pending"
          | "Preempted"
          | "Provisioned"
          | "Running"
          | "Stopped";
      };
      readonly path: {
        /** @description The ID of the project to fetch notebooks for */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the notebook was created
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the notebook was last modified
               */
              readonly dtModified: Date;
              /**
               * Format: date-time
               * @description The date the notebook was last started
               */
              readonly dtStarted: Date;
              /** @description The ID of the notebook */
              readonly id: string;
              /** @description The type of the machine the notebook is running on */
              readonly machineType: string | null;
              /** @description The name of the notebook */
              readonly name: string;
              /** @description The notebook repo ID */
              readonly notebookRepoId: string | null;
              /** @description The project ID */
              readonly projectId: string;
              /** @description The last user to start the notebook */
              readonly startedByUser: {
                /**
                 * Format: email
                 * @description The email address of the user
                 */
                readonly email: string;
                /**
                 * @description The first name of the user
                 * @default null
                 */
                readonly firstName?: string | null;
                /** @description The ID of the user */
                readonly id: string;
                /**
                 * @description The last name of the user
                 * @default null
                 */
                readonly lastName?: string | null;
                /**
                 * @description The URL of the team's profile image.
                 * @default null
                 */
                readonly publicProfileImageUrl?: string | null;
              };
              /**
               * @description The state of the notebook.
               * @enum {string}
               */
              readonly state:
                | "Cancel"
                | "Cancelled"
                | "Error"
                | "Failed"
                | "Pending"
                | "Preempted"
                | "Provisioned"
                | "Running"
                | "Stopped";
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Add a notebook to a project
   * @description Adds a notebook to a project.
   */
  "projectNotebooks-add": {
    parameters: {
      readonly path: {
        /** @description The ID of the project to add the notebook to */
        id: string;
        /** @description The ID of the notebook to add to the project */
        notebookId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the notebook was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the notebook was last modified
             */
            readonly dtModified: Date;
            /**
             * Format: date-time
             * @description The date the notebook was last started
             */
            readonly dtStarted: Date;
            /** @description The ID of the notebook */
            readonly id: string;
            /** @description The type of the machine the notebook is running on */
            readonly machineType: string | null;
            /** @description The name of the notebook */
            readonly name: string;
            /** @description The notebook repo ID */
            readonly notebookRepoId: string | null;
            /** @description The project ID */
            readonly projectId: string;
            /** @description The last user to start the notebook */
            readonly startedByUser: {
              /**
               * Format: email
               * @description The email address of the user
               */
              readonly email: string;
              /**
               * @description The first name of the user
               * @default null
               */
              readonly firstName?: string | null;
              /** @description The ID of the user */
              readonly id: string;
              /**
               * @description The last name of the user
               * @default null
               */
              readonly lastName?: string | null;
              /**
               * @description The URL of the team's profile image.
               * @default null
               */
              readonly publicProfileImageUrl?: string | null;
            };
            /**
             * @description The state of the notebook.
             * @enum {string}
             */
            readonly state:
              | "Cancel"
              | "Cancelled"
              | "Error"
              | "Failed"
              | "Pending"
              | "Preempted"
              | "Provisioned"
              | "Running"
              | "Stopped";
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's secrets
   * @description Fetches a list of secrets for a project.
   */
  "projectSecrets-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
      readonly path: {
        /** @description The ID of the project where the secret is stored. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the secret was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the secret was last modified.
               */
              readonly dtModified: Date;
              /** @description The name of the secret, e.g. "DB_PASSWORD". */
              readonly name: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a project secret
   * @description Creates a new secret for a project.
   */
  "projectSecrets-create": {
    parameters: {
      readonly path: {
        /** @description The ID of the project where the secret is stored. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the secret, e.g. "DB_PASSWORD". */
          readonly name: string;
          /** @description The value of the secret, e.g. "password". */
          readonly value: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the secret was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the secret was last modified.
             */
            readonly dtModified: Date;
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a project secret
   * @description Fetches a secret for a project.
   */
  "projectSecrets-getProjectSecret": {
    parameters: {
      readonly path: {
        /** @description The ID of the project where the secret is stored. */
        id: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the secret was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the secret was last modified.
             */
            readonly dtModified: Date;
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a project secret
   * @description Deletes a secret for a project.
   */
  "projectSecrets-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the project where the secret is stored. */
        id: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a project secret
   * @description Update the value of a secret for a project.
   */
  "projectSecrets-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the project where the secret is stored. */
        id: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The value of the secret, e.g. "password". */
          readonly value: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the secret was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the secret was last modified.
             */
            readonly dtModified: Date;
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List public IPs
   * @description Fetches a list of public IPs.
   */
  "publicIps-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        region?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The ID of the machine the public IP is assigned to. */
              readonly assignedMachineId?: string;
              /**
               * Format: date-time
               * @description The date the public IP was claimed.
               */
              readonly dtCreated: Date;
              /** @description The IP address of the public IP. */
              readonly ip: string;
              /** @description The region of the public IP. */
              readonly region: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Claim a public IP
   * @description Claims a public IP.
   */
  "publicIps-claim": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The region of the public IP. */
          readonly region: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the machine the public IP is assigned to. */
            readonly assignedMachineId?: string;
            /**
             * Format: date-time
             * @description The date the public IP was claimed.
             */
            readonly dtCreated: Date;
            /** @description The IP address of the public IP. */
            readonly ip: string;
            /** @description The region of the public IP. */
            readonly region: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Assign a public IP
   * @description Assigns a public IP to a machine.
   */
  "publicIps-assign": {
    parameters: {
      readonly path: {
        /** @description The IP address of the public IP. */
        ip: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The ID of the machine to assign the public IP to. */
          readonly machineId: string | null;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the machine the public IP is assigned to. */
            readonly assignedMachineId?: string;
            /**
             * Format: date-time
             * @description The date the public IP was claimed.
             */
            readonly dtCreated: Date;
            /** @description The IP address of the public IP. */
            readonly ip: string;
            /** @description The region of the public IP. */
            readonly region: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Release a public IP
   * @description Releases a public IP.
   */
  "publicIps-release": {
    parameters: {
      readonly path: {
        /** @description The IP address of the public IP. */
        ip: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            readonly ip: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List shared drives
   * @description Fetches a list of shared drives.
   */
  "sharedDrives-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        name?: string;
        region?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the shared drive was created.
               */
              readonly dtCreated: Date;
              /** @description The date the shared drive was deleted. */
              readonly dtDeleted?: (Record<string, never> | Date) | null;
              /** @description The ID of the shared drive. */
              readonly id: string;
              /** @description The mount point of the shared drive. */
              readonly mountPoint: string;
              /** @description The name of the shared drive. */
              readonly name: string;
              /** @description The ID of the network the shared drive is in. */
              readonly networkId: string;
              /** @description The password of the shared drive. */
              readonly password: string;
              /** @description The region the shared drive is in. */
              readonly region: string;
              /**
               * Format: int64
               * @description The size of the shared drive.
               */
              readonly size: number;
              /** @description The username of the shared drive. */
              readonly username: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a shared drive
   * @description Creates a new shared drive for use in a private network.
   */
  "sharedDrives-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the shared drive. */
          readonly name: string;
          /** @description The ID of the network the shared drive is in. */
          readonly networkId: string;
          /** @description The region the shared drive is in. */
          readonly region: string;
          /** @description The size of the shared drive in gigabytes. */
          readonly size: number;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the shared drive was created.
             */
            readonly dtCreated: Date;
            /** @description The date the shared drive was deleted. */
            readonly dtDeleted?: (Record<string, never> | Date) | null;
            /** @description The ID of the shared drive. */
            readonly id: string;
            /** @description The mount point of the shared drive. */
            readonly mountPoint: string;
            /** @description The name of the shared drive. */
            readonly name: string;
            /** @description The ID of the network the shared drive is in. */
            readonly networkId: string;
            /** @description The password of the shared drive. */
            readonly password: string;
            /** @description The region the shared drive is in. */
            readonly region: string;
            /**
             * Format: int64
             * @description The size of the shared drive.
             */
            readonly size: number;
            /** @description The username of the shared drive. */
            readonly username: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a shared drive
   * @description Fetches a single shared drive by ID.
   */
  "sharedDrives-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the shared drive to fetch. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the shared drive was created.
             */
            readonly dtCreated: Date;
            /** @description The date the shared drive was deleted. */
            readonly dtDeleted?: (Record<string, never> | Date) | null;
            /** @description The ID of the shared drive. */
            readonly id: string;
            /** @description The mount point of the shared drive. */
            readonly mountPoint: string;
            /** @description The name of the shared drive. */
            readonly name: string;
            /** @description The ID of the network the shared drive is in. */
            readonly networkId: string;
            /** @description The password of the shared drive. */
            readonly password: string;
            /** @description The region the shared drive is in. */
            readonly region: string;
            /**
             * Format: int64
             * @description The size of the shared drive.
             */
            readonly size: number;
            /** @description The username of the shared drive. */
            readonly username: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a shared drive
   * @description Updates a single shared drive by ID.
   */
  "sharedDrives-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the shared drive to fetch. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the shared drive. */
          readonly name?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the shared drive was created.
             */
            readonly dtCreated: Date;
            /** @description The date the shared drive was deleted. */
            readonly dtDeleted?: (Record<string, never> | Date) | null;
            /** @description The ID of the shared drive. */
            readonly id: string;
            /** @description The mount point of the shared drive. */
            readonly mountPoint: string;
            /** @description The name of the shared drive. */
            readonly name: string;
            /** @description The ID of the network the shared drive is in. */
            readonly networkId: string;
            /** @description The password of the shared drive. */
            readonly password: string;
            /** @description The region the shared drive is in. */
            readonly region: string;
            /**
             * Format: int64
             * @description The size of the shared drive.
             */
            readonly size: number;
            /** @description The username of the shared drive. */
            readonly username: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a shared drive
   * @description Deletes a single shared drive by ID.
   */
  "sharedDrives-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the shared drive to delete. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the deleted shared drive. */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List snapshots
   * @description List snapshots and filter by machine.
   */
  "snapshots-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        machineId?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The ID of the snapshot. */
              readonly id: string;
              /** @description Whether the snapshot was made automatically. */
              readonly isAutoSnapshot: boolean;
              /** @description The ID of the machine the snapshot is for. */
              readonly machineId: string;
              /** @description The name of the snapshot. */
              readonly name: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create snapshot
   * @description Create a snapshot for a machine.
   */
  "snapshots-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The ID of the machine to create a snapshot for. */
          readonly machineId: string;
          /** @description The name of the snapshot. */
          readonly name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The snapshot. */
            readonly data: {
              /** @description The ID of the snapshot. */
              readonly id: string;
              /** @description Whether the snapshot was made automatically. */
              readonly isAutoSnapshot: boolean;
              /** @description The ID of the machine the snapshot is for. */
              readonly machineId: string;
              /** @description The name of the snapshot. */
              readonly name: string;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a snapshot
   * @description Fetches a single snapshot by ID.
   */
  "snapshots-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the snapshot. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the snapshot. */
            readonly id: string;
            /** @description Whether the snapshot was made automatically. */
            readonly isAutoSnapshot: boolean;
            /** @description The ID of the machine the snapshot is for. */
            readonly machineId: string;
            /** @description The name of the snapshot. */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a snapshot
   * @description Updates a single snapshot by ID.
   */
  "snapshots-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the snapshot. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the snapshot. */
          readonly name?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the snapshot. */
            readonly id: string;
            /** @description Whether the snapshot was made automatically. */
            readonly isAutoSnapshot: boolean;
            /** @description The ID of the machine the snapshot is for. */
            readonly machineId: string;
            /** @description The name of the snapshot. */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete snapshot
   * @description Delete a snapshot for a machine.
   */
  "snapshots-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the snapshot. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The snapshot. */
            readonly data: {
              /** @description The ID of the snapshot. */
              readonly id: string;
              /** @description Whether the snapshot was made automatically. */
              readonly isAutoSnapshot: boolean;
              /** @description The ID of the machine the snapshot is for. */
              readonly machineId: string;
              /** @description The name of the snapshot. */
              readonly name: string;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Restore snapshot
   * @description Restore a snapshot for a machine.
   */
  "snapshots-restore": {
    parameters: {
      readonly path: {
        /** @description The ID of the snapshot. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description Create a new snapshot before restoring. */
          readonly createSnapshotBeforeRestore?: boolean;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The snapshot. */
            readonly data: {
              /** @description The ID of the snapshot. */
              readonly id: string;
              /** @description Whether the snapshot was made automatically. */
              readonly isAutoSnapshot: boolean;
              /** @description The ID of the machine the snapshot is for. */
              readonly machineId: string;
              /** @description The name of the snapshot. */
              readonly name: string;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List startup scripts
   * @description Fetches a list of startup scripts.
   */
  "startupScripts-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        name?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The IDs of the machines the startup script is assigned to. */
              readonly assignedMachineIds: readonly (string)[];
              /** @description The description of the startup script. */
              readonly description: string | null;
              /**
               * Format: date-time
               * @description The date the startup script was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the startup script was deleted.
               */
              readonly dtDeleted: Date;
              /** @description The ID of the startup script. */
              readonly id: string;
              /** @description Whether the startup script is enabled. */
              readonly isEnabled: boolean;
              /** @description Whether the startup script is run once on first boot or on every boot. */
              readonly isRunOnce: boolean;
              /** @description The name of the startup script. */
              readonly name: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create startup script
   * @description Create a startup script.
   */
  "startupScripts-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * @description Whether the script should only run once on first boot or on every boot.
           * @default false
           */
          readonly isRunOnce?: boolean;
          /** @description The name of the startup script. */
          readonly name: string;
          /** @description The script to run on startup. */
          readonly script: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The IDs of the machines the startup script is assigned to. */
            readonly assignedMachineIds: readonly (string)[];
            /** @description The description of the startup script. */
            readonly description: string | null;
            /**
             * Format: date-time
             * @description The date the startup script was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the startup script was deleted.
             */
            readonly dtDeleted: Date;
            /** @description The ID of the startup script. */
            readonly id: string;
            /** @description Whether the startup script is enabled. */
            readonly isEnabled: boolean;
            /** @description Whether the startup script is run once on first boot or on every boot. */
            readonly isRunOnce: boolean;
            /** @description The name of the startup script. */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a startup script
   * @description Fetches a single startup script by ID.
   */
  "startupScripts-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the startup script to fetch. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The IDs of the machines the startup script is assigned to. */
            readonly assignedMachineIds: readonly (string)[];
            /** @description The description of the startup script. */
            readonly description: string | null;
            /**
             * Format: date-time
             * @description The date the startup script was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the startup script was deleted.
             */
            readonly dtDeleted: Date;
            /** @description The ID of the startup script. */
            readonly id: string;
            /** @description Whether the startup script is enabled. */
            readonly isEnabled: boolean;
            /** @description Whether the startup script is run once on first boot or on every boot. */
            readonly isRunOnce: boolean;
            /** @description The name of the startup script. */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update startup script
   * @description Update a startup script.
   */
  "startupScripts-update": {
    parameters: {
      readonly path: {
        /** @description The id of the startup script. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description Whether the startup script is enabled. */
          readonly isEnabled?: boolean;
          /** @description Whether the script should only run once on first boot or on every boot. */
          readonly isRunOnce?: boolean;
          /** @description The name of the startup script. */
          readonly name?: string;
          /** @description The script to run on startup. */
          readonly script?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The IDs of the machines the startup script is assigned to. */
            readonly assignedMachineIds: readonly (string)[];
            /** @description The description of the startup script. */
            readonly description: string | null;
            /**
             * Format: date-time
             * @description The date the startup script was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the startup script was deleted.
             */
            readonly dtDeleted: Date;
            /** @description The ID of the startup script. */
            readonly id: string;
            /** @description Whether the startup script is enabled. */
            readonly isEnabled: boolean;
            /** @description Whether the startup script is run once on first boot or on every boot. */
            readonly isRunOnce: boolean;
            /** @description The name of the startup script. */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete startup script
   * @description Delete a startup script.
   */
  "startupScripts-delete": {
    parameters: {
      readonly path: {
        /** @description The id of the startup script. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The IDs of the machines the startup script is assigned to. */
            readonly assignedMachineIds: readonly (string)[];
            /** @description The description of the startup script. */
            readonly description: string | null;
            /**
             * Format: date-time
             * @description The date the startup script was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the startup script was deleted.
             */
            readonly dtDeleted: Date;
            /** @description The ID of the startup script. */
            readonly id: string;
            /** @description Whether the startup script is enabled. */
            readonly isEnabled: boolean;
            /** @description Whether the startup script is run once on first boot or on every boot. */
            readonly isRunOnce: boolean;
            /** @description The name of the startup script. */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Assign startup script to machine
   * @description Assign a startup script to a machine.
   */
  "startupScripts-assign": {
    parameters: {
      readonly path: {
        /** @description The id of the startup script. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The id of the machine to assign the startup script to. */
          readonly machineId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The IDs of the machines the startup script is assigned to. */
            readonly assignedMachineIds: readonly (string)[];
            /** @description The description of the startup script. */
            readonly description: string | null;
            /**
             * Format: date-time
             * @description The date the startup script was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the startup script was deleted.
             */
            readonly dtDeleted: Date;
            /** @description The ID of the startup script. */
            readonly id: string;
            /** @description Whether the startup script is enabled. */
            readonly isEnabled: boolean;
            /** @description Whether the startup script is run once on first boot or on every boot. */
            readonly isRunOnce: boolean;
            /** @description The name of the startup script. */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Unassign startup script from machine
   * @description Unassign a startup script from a machine.
   */
  "startupScripts-unassign": {
    parameters: {
      readonly path: {
        /** @description The id of the startup script. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The id of the machine to unassign the startup script from. */
          readonly machineId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The IDs of the machines the startup script is assigned to. */
            readonly assignedMachineIds: readonly (string)[];
            /** @description The description of the startup script. */
            readonly description: string | null;
            /**
             * Format: date-time
             * @description The date the startup script was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the startup script was deleted.
             */
            readonly dtDeleted: Date;
            /** @description The ID of the startup script. */
            readonly id: string;
            /** @description Whether the startup script is enabled. */
            readonly isEnabled: boolean;
            /** @description Whether the startup script is run once on first boot or on every boot. */
            readonly isRunOnce: boolean;
            /** @description The name of the startup script. */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List storage providers
   * @description List storage providers
   */
  "storageProviders-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The ID of the storage provider */
              readonly id: string;
              /** @description Whether the storage provider is managed by Paperspace */
              readonly isManaged: boolean;
              /** @description Whether the storage provider is the team's default provider */
              readonly isTeamDefault: boolean | null;
              /** @description The name of the storage provider */
              readonly name: string;
              /** @description The storage provider configuration */
              readonly s3Config: {
                readonly accessKey: string;
                readonly bucket: string;
                /**
                 * Format: uri
                 * @default null
                 */
                readonly endpoint?: string | null;
                readonly region?: string | null;
                /** @default false */
                readonly retainData?: boolean | null;
                readonly secretAccessKey: string;
                readonly signatureVersion?: string | null;
              };
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a storage provider
   * @description Create a storage provider
   */
  "storageProviders-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description Is team default */
          readonly isTeamDefault?: boolean;
          /** @description The name of the storage provider */
          readonly name: string;
          /** @description The storage provider configuration */
          readonly s3Config: {
            readonly accessKey: string;
            readonly bucket: string;
            /**
             * Format: uri
             * @default null
             */
            readonly endpoint?: string | null;
            readonly region?: string | null;
            /** @default false */
            readonly retainData?: boolean | null;
            readonly secretAccessKey: string;
            readonly signatureVersion?: string | null;
          };
          /**
           * @description The type of storage provider
           * @enum {string}
           */
          readonly storageProviderType: "s3";
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the storage provider */
            readonly id: string;
            /** @description Whether the storage provider is managed by Paperspace */
            readonly isManaged: boolean;
            /** @description Whether the storage provider is the team's default provider */
            readonly isTeamDefault: boolean | null;
            /** @description The name of the storage provider */
            readonly name: string;
            /** @description The storage provider configuration */
            readonly s3Config: {
              readonly accessKey: string;
              readonly bucket: string;
              /**
               * Format: uri
               * @default null
               */
              readonly endpoint?: string | null;
              readonly region?: string | null;
              /** @default false */
              readonly retainData?: boolean | null;
              readonly secretAccessKey: string;
              readonly signatureVersion?: string | null;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a storage provider
   * @description Get a storage provider
   */
  "storageProviders-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the storage provider */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the storage provider */
            readonly id: string;
            /** @description Whether the storage provider is managed by Paperspace */
            readonly isManaged: boolean;
            /** @description Whether the storage provider is the team's default provider */
            readonly isTeamDefault: boolean | null;
            /** @description The name of the storage provider */
            readonly name: string;
            /** @description The storage provider configuration */
            readonly s3Config: {
              readonly accessKey: string;
              readonly bucket: string;
              /**
               * Format: uri
               * @default null
               */
              readonly endpoint?: string | null;
              readonly region?: string | null;
              /** @default false */
              readonly retainData?: boolean | null;
              readonly secretAccessKey: string;
              readonly signatureVersion?: string | null;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a storage provider
   * @description Update a storage provider
   */
  "storageProviders-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the storage provider */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description Is team default */
          readonly isTeamDefault: boolean;
          /** @description The name of the storage provider */
          readonly name: string;
          /** @description The storage provider configuration */
          readonly s3Config: {
            readonly accessKey: string;
            readonly bucket: string;
            /**
             * Format: uri
             * @default null
             */
            readonly endpoint?: string | null;
            readonly region?: string | null;
            /** @default false */
            readonly retainData?: boolean | null;
            readonly secretAccessKey: string;
            readonly signatureVersion?: string | null;
          };
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the storage provider */
            readonly id: string;
            /** @description Whether the storage provider is managed by Paperspace */
            readonly isManaged: boolean;
            /** @description Whether the storage provider is the team's default provider */
            readonly isTeamDefault: boolean | null;
            /** @description The name of the storage provider */
            readonly name: string;
            /** @description The storage provider configuration */
            readonly s3Config: {
              readonly accessKey: string;
              readonly bucket: string;
              /**
               * Format: uri
               * @default null
               */
              readonly endpoint?: string | null;
              readonly region?: string | null;
              /** @default false */
              readonly retainData?: boolean | null;
              readonly secretAccessKey: string;
              readonly signatureVersion?: string | null;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a storage provider
   * @description Delete a storage provider
   */
  "storageProviders-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the storage provider */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The ID of the storage provider */
            readonly id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get storage utilization
   * @description Get a breakdown of how storage is being used by your team
   */
  "storageUtilization-getPublic": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Storage used by datasets in bytes */
            readonly datasetUsage: string;
            /** @description Storage used by models in bytes */
            readonly modelUsage: string;
            /** @description Storage used by notebooks files in bytes */
            readonly notebookWorkspaceUsage: string;
            /** @description The amount of free storage left before you reach your plan's limit in bytes */
            readonly remainingFreeStorage: string;
            /** @description Persistent storage used by the notebook shared storage directory in bytes */
            readonly sharedStorageUsage: string;
            /** @description The amount of free storage that comes with your current plan in bytes */
            readonly totalFreeStorage: string;
            /** @description Total storage used by your team in bytes */
            readonly totalUsage: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a team's secrets
   * @description Fetches a list of secrets for a team.
   */
  "teamSecrets-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
      readonly path: {
        /** @description The ID of the team where the secret is stored. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /**
               * Format: date-time
               * @description The date the secret was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the secret was last modified.
               */
              readonly dtModified: Date;
              /** @description The name of the secret, e.g. "DB_PASSWORD". */
              readonly name: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a team secret
   * @description Creates a new secret for a team.
   */
  "teamSecrets-create": {
    parameters: {
      readonly path: {
        /** @description The ID of the team where the secret is stored. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the secret, e.g. "DB_PASSWORD". */
          readonly name: string;
          /** @description The value of the secret, e.g. "password". */
          readonly value: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the secret was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the secret was last modified.
             */
            readonly dtModified: Date;
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a team secret
   * @description Fetches a secret for a team.
   */
  "teamSecrets-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the team where the secret is stored. */
        id: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the secret was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the secret was last modified.
             */
            readonly dtModified: Date;
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a team secret
   * @description Deletes a secret for a team.
   */
  "teamSecrets-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the team where the secret is stored. */
        id: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a team secret
   * @description Update the value of a secret for a team.
   */
  "teamSecrets-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the team where the secret is stored. */
        id: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The value of the secret, e.g. "password". */
          readonly value: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /**
             * Format: date-time
             * @description The date the secret was created.
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description The date the secret was last modified.
             */
            readonly dtModified: Date;
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            readonly name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List templates
   * @description Fetches a list of templates.
   */
  "templates-list": {
    parameters: {
      readonly query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated" | "name";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        name?: string;
        machineId?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description Whether there are more pages of results available. */
            readonly hasMore: boolean;
            /** @description The items on this page. */
            readonly items: readonly ({
              /** @description The type of agent installed on the template. */
              readonly agentType: string;
              /** @description The machine types the template is available on. */
              readonly availableMachineTypes: readonly ({
                /** @description Whether the template is available on this machine type. */
                readonly isAvailable: boolean;
                /** @description The label of the machine type. */
                readonly machineTypeLabel: string;
              })[];
              /** @description The default size of the template in gigabytes. */
              readonly defaultSizeGb: number;
              /**
               * Format: date-time
               * @description The date the template was created.
               */
              readonly dtCreated: Date;
              /** @description The date the shared drive was deleted. */
              readonly dtDeleted?: (Record<string, never> | Date) | null;
              /** @description The ID of the template. */
              readonly id: string;
              /**
               * @description Whether the template is public.
               * @default false
               */
              readonly isPublic?: boolean;
              /** @description The name of the template. */
              readonly name: string;
              /** @description The operating system installed on the template. */
              readonly operatingSystemLabel: string;
              /** @description The ID of the parent machine. */
              readonly parentMachineId: string;
              /** @description The region the template is in. Public templates are in all regions. */
              readonly region: string;
            })[];
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            readonly nextPage?: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create template
   * @description Create a template for a machine.
   */
  "templates-create": {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The ID of the machine to create a template from. */
          readonly machineId: string;
          /** @description The name of the template. */
          readonly name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The template. */
            readonly data: {
              /** @description The type of agent installed on the template. */
              readonly agentType: string;
              /** @description The machine types the template is available on. */
              readonly availableMachineTypes: readonly ({
                /** @description Whether the template is available on this machine type. */
                readonly isAvailable: boolean;
                /** @description The label of the machine type. */
                readonly machineTypeLabel: string;
              })[];
              /** @description The default size of the template in gigabytes. */
              readonly defaultSizeGb: number;
              /**
               * Format: date-time
               * @description The date the template was created.
               */
              readonly dtCreated: Date;
              /** @description The date the shared drive was deleted. */
              readonly dtDeleted?: (Record<string, never> | Date) | null;
              /** @description The ID of the template. */
              readonly id: string;
              /**
               * @description Whether the template is public.
               * @default false
               */
              readonly isPublic?: boolean;
              /** @description The name of the template. */
              readonly name: string;
              /** @description The operating system installed on the template. */
              readonly operatingSystemLabel: string;
              /** @description The ID of the parent machine. */
              readonly parentMachineId: string;
              /** @description The region the template is in. Public templates are in all regions. */
              readonly region: string;
            };
            /** @description The machine event to poll for the async operation. */
            readonly event: {
              /**
               * Format: date-time
               * @description The date the event was created.
               */
              readonly dtCreated: Date;
              /**
               * Format: date-time
               * @description The date the event was finished.
               */
              readonly dtFinished: Date;
              /**
               * Format: date-time
               * @description The date the event was started.
               */
              readonly dtStarted: Date;
              /** @description The error message of the event, if any. */
              readonly error: string | null;
              /** @description The ID of the event. */
              readonly id: string;
              /** @description The ID of the machine the event is for. */
              readonly machineId: string | null;
              /**
               * @description The name of the event, e.g. "create".
               * @enum {string}
               */
              readonly name:
                | "bill-sessions"
                | "bill-upgrade"
                | "create"
                | "deactivate"
                | "restart"
                | "snapshot-create"
                | "snapshot-delete"
                | "snapshot-restore"
                | "start"
                | "stop"
                | "template-create"
                | "template-delete"
                | "template-distribute"
                | "template-import"
                | "vm-migrate"
                | "vm-shutdown-force"
                | "vm-upgrade";
              /**
               * @description The state of the event, e.g. "done".
               * @enum {string}
               */
              readonly state:
                | "new"
                | "in progress"
                | "done"
                | "error"
                | "cancelled";
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a template
   * @description Fetches a single template by ID.
   */
  "templates-get": {
    parameters: {
      readonly path: {
        /** @description The ID of the template to fetch. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The type of agent installed on the template. */
            readonly agentType: string;
            /** @description The machine types the template is available on. */
            readonly availableMachineTypes: readonly ({
              /** @description Whether the template is available on this machine type. */
              readonly isAvailable: boolean;
              /** @description The label of the machine type. */
              readonly machineTypeLabel: string;
            })[];
            /** @description The default size of the template in gigabytes. */
            readonly defaultSizeGb: number;
            /**
             * Format: date-time
             * @description The date the template was created.
             */
            readonly dtCreated: Date;
            /** @description The date the shared drive was deleted. */
            readonly dtDeleted?: (Record<string, never> | Date) | null;
            /** @description The ID of the template. */
            readonly id: string;
            /**
             * @description Whether the template is public.
             * @default false
             */
            readonly isPublic?: boolean;
            /** @description The name of the template. */
            readonly name: string;
            /** @description The operating system installed on the template. */
            readonly operatingSystemLabel: string;
            /** @description The ID of the parent machine. */
            readonly parentMachineId: string;
            /** @description The region the template is in. Public templates are in all regions. */
            readonly region: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a template
   * @description Updates a single template by ID.
   */
  "templates-update": {
    parameters: {
      readonly path: {
        /** @description The ID of the template to update. */
        id: string;
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** @description The name of the template. */
          readonly name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The type of agent installed on the template. */
            readonly agentType: string;
            /** @description The machine types the template is available on. */
            readonly availableMachineTypes: readonly ({
              /** @description Whether the template is available on this machine type. */
              readonly isAvailable: boolean;
              /** @description The label of the machine type. */
              readonly machineTypeLabel: string;
            })[];
            /** @description The default size of the template in gigabytes. */
            readonly defaultSizeGb: number;
            /**
             * Format: date-time
             * @description The date the template was created.
             */
            readonly dtCreated: Date;
            /** @description The date the shared drive was deleted. */
            readonly dtDeleted?: (Record<string, never> | Date) | null;
            /** @description The ID of the template. */
            readonly id: string;
            /**
             * @description Whether the template is public.
             * @default false
             */
            readonly isPublic?: boolean;
            /** @description The name of the template. */
            readonly name: string;
            /** @description The operating system installed on the template. */
            readonly operatingSystemLabel: string;
            /** @description The ID of the parent machine. */
            readonly parentMachineId: string;
            /** @description The region the template is in. Public templates are in all regions. */
            readonly region: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete template
   * @description Delete a template.
   */
  "templates-delete": {
    parameters: {
      readonly path: {
        /** @description The ID of the template to delete. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": {
            /** @description The type of agent installed on the template. */
            readonly agentType: string;
            /** @description The machine types the template is available on. */
            readonly availableMachineTypes: readonly ({
              /** @description Whether the template is available on this machine type. */
              readonly isAvailable: boolean;
              /** @description The label of the machine type. */
              readonly machineTypeLabel: string;
            })[];
            /** @description The default size of the template in gigabytes. */
            readonly defaultSizeGb: number;
            /**
             * Format: date-time
             * @description The date the template was created.
             */
            readonly dtCreated: Date;
            /** @description The date the shared drive was deleted. */
            readonly dtDeleted?: (Record<string, never> | Date) | null;
            /** @description The ID of the template. */
            readonly id: string;
            /**
             * @description Whether the template is public.
             * @default false
             */
            readonly isPublic?: boolean;
            /** @description The name of the template. */
            readonly name: string;
            /** @description The operating system installed on the template. */
            readonly operatingSystemLabel: string;
            /** @description The ID of the parent machine. */
            readonly parentMachineId: string;
            /** @description The region the template is in. Public templates are in all regions. */
            readonly region: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List workflow run logs
   * @description Lists logs for a given workflow run.
   */
  "workflowRunLogs-list": {
    parameters: {
      readonly path: {
        /** @description The ID of the workflow */
        id: string;
        /** @description The ID of the workflow run */
        runId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          readonly "application/json": readonly ({
            /**
             * Format: date-time
             * @description When the workflow run job was created
             */
            readonly dtCreated: Date;
            /**
             * Format: date-time
             * @description When the workflow run job finished
             * @default null
             */
            readonly dtFinished?: Date;
            /**
             * Format: date-time
             * @description When the workflow run job started
             * @default null
             */
            readonly dtStarted?: Date;
            /**
             * Format: uuid
             * @description The ID of the workflow run job
             */
            readonly id: string;
            /** @description The logs for the workflow run jobs */
            readonly logs: readonly ({
              /**
               * Format: date-time
               * @description The date the log was created.
               */
              readonly dtCreated: Date;
              /** @description ID of the log item */
              readonly id: string;
              /**
               * @description The instance ID the log is associated with.
               * @default null
               */
              readonly instanceId?: string | null;
              /** @description The associated job ID of the log item. */
              readonly jobId: string;
              /** @description The line number of the log item. */
              readonly line: string;
              /** @description The message of the log item. */
              readonly message: string;
              /**
               * @description UUID representing the log item
               * @default null
               */
              readonly uuid?: string | null;
            })[];
            /**
             * @description The message of the workflow run job
             * @default null
             */
            readonly message?: string | null;
            /** @description The name of the workflow run job */
            readonly name: string;
            /** @description The phase of the workflow run job */
            readonly phase: string;
            /**
             * Format: uuid
             * @description The ID of the workflow run
             */
            readonly workflowRunId: string;
          })[];
        };
      };
      default: components["responses"]["error"];
    };
  };
}
